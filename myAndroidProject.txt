# File: ./app/build.gradle.kts
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    id("com.chaquo.python") version "15.0.1"
    id("com.google.devtools.ksp") version "2.0.21-1.0.27"
}

android {
    namespace = "com.example.mynewapplication"
    compileSdk = 36

    defaultConfig {
        applicationId = "com.example.mynewapplication"
        minSdk = 24
        targetSdk = 36
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters += listOf(
                "armeabi-v7a", "x86", "x86_64"
            )
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {
    implementation(libs.coil.compose)
    implementation(libs.coil.gif)
    implementation(libs.gson)
    implementation(libs.google.accompanist.permissions)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.camera.core)
    implementation(libs.androidx.camera.camera2)
    implementation(libs.androidx.camera.lifecycle)
    implementation(libs.androidx.camera.view)
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    ksp(libs.androidx.room.compiler)
    implementation(libs.androidx.material.icons.extended) // Добавляем расширенные иконки
    implementation(libs.gson)
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.navigation.compose)
    implementation(libs.kotlinx.coroutines.android.v181)
    implementation(libs.coil.compose)
    implementation("com.rmtheis:tess-two:9.1.0") {
        exclude(group = "com.intellij", module = "annotations")
    }
    implementation(libs.androidx.lifecycle.runtime.compose)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}

chaquopy {
    defaultConfig {
        buildPython("C:/Users/yeliz/PycharmProjects/japan/.venv/Scripts/python.exe")
        pyc {
            src = false
        }
        pip {
            install("opencv-python-headless")
            install("Pillow")
        }
    }
}
# File: ./app/src/androidTest/java/com/example/mynewapplication/ExampleInstrumentedTest.kt
package com.example.mynewapplication

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.mynewapplication", appContext.packageName)
    }
}
# File: ./app/src/main/AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.mynewapplication">

    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32" />
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
    <uses-permission android:name="android.permission.CAMERA" />

    <uses-feature android:name="android.hardware.camera" android:required="false" />

    <application
        android:name=".App"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.MyNewApplication">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
# File: ./app/src/main/java/com/example/mynewapplication/App.kt
package com.example.mynewapplication

import android.app.Application
import android.util.Log
import com.chaquo.python.Python
import com.chaquo.python.android.AndroidPlatform
import java.io.IOException
import java.io.File
import java.io.FileOutputStream

class App : Application() {
    override fun onCreate() {
        super.onCreate()
        if (!Python.isStarted()) {
            Python.start(AndroidPlatform(this))
            Log.d("App", "Python initialized successfully")
            copyTessdataToChaquopy()
        }
    }

    private fun copyTessdataToChaquopy() {
        try {
            val chaquopyTessdataDir = File(filesDir, "chaquopy/AssetFinder/tessdata")
            if (!chaquopyTessdataDir.exists()) {
                chaquopyTessdataDir.mkdirs()
            }
            val tessdataFile = File(chaquopyTessdataDir, "jpn.traineddata")
            if (!tessdataFile.exists()) {
                assets.open("tessdata/jpn.traineddata").use { input ->
                    FileOutputStream(tessdataFile).use { output ->
                        input.copyTo(output)
                    }
                }
                Log.d("App", "Tessdata copied to Chaquopy")
            } else {
                Log.d("App", "Tessdata already exists in Chaquopy")
            }
        } catch (e: IOException) {
            Log.e("App", "Error copying tessdata to Chaquopy", e)
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/data/dao/KanjiCollectionDao.kt
package com.example.mynewapplication.data.dao

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.Query
import androidx.room.Update
import com.example.mynewapplication.data.model.KanjiCollection
import kotlinx.coroutines.flow.Flow

@Dao
interface KanjiCollectionDao {
    @Query("SELECT * FROM kanji_collections")
    fun getAllCollections(): Flow<List<KanjiCollection>>

    @Query("SELECT * FROM kanji_collections WHERE name LIKE '%' || :query || '%'")
    fun searchCollections(query: String): Flow<List<KanjiCollection>>

    @Insert
    suspend fun insertCollection(collection: KanjiCollection)

    @Update
    suspend fun updateCollection(collection: KanjiCollection)

    @Delete
    suspend fun deleteCollection(collection: KanjiCollection)
}
# File: ./app/src/main/java/com/example/mynewapplication/data/db/AppDatabase.kt
package com.example.mynewapplication.data.db

import androidx.room.Database
import androidx.room.RoomDatabase
import com.example.mynewapplication.data.dao.KanjiCollectionDao
import com.example.mynewapplication.data.model.KanjiCollection

@Database(entities = [KanjiCollection::class], version = 1, exportSchema = false)
abstract class AppDatabase : RoomDatabase() {
    abstract fun kanjiCollectionDao(): KanjiCollectionDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: android.content.Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = androidx.room.Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "kanji_database"
                ).build()
                INSTANCE = instance
                instance
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/data/json/JsonParser.kt
package com.example.mynewapplication.data.json

import android.content.Context
import com.example.mynewapplication.data.model.Kanji
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import java.io.BufferedReader

object JsonParser {
    fun loadKanjiList(context: Context): List<Kanji> {
        val jsonString = context.assets.open("kanji_database.json").bufferedReader().use(BufferedReader::readText)
        val type = object : TypeToken<List<Kanji>>() {}.type
        return Gson().fromJson(jsonString, type)
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/data/model/Kanji.kt
package com.example.mynewapplication.data.model

import com.google.gson.annotations.SerializedName

data class Kanji(
    @SerializedName("kanji") val kanji: String,
    @SerializedName("translation") val translation: String,
    @SerializedName("onReadings") val onReadings: List<String>,
    @SerializedName("kunReadings") val kunReadings: List<String>,
    @SerializedName("combinations") val combinations: List<Combination>, // Исправлено на List<Combination>
    @SerializedName("radical") val radical: String,
    @SerializedName("strokes") val strokes: Int,
    @SerializedName("grade") val grade: String,
    @SerializedName("gifPath") val gifPath: String?
)

data class Combination(
    @SerializedName("kanji") val kanji: String,
    @SerializedName("transcription") val transcription: String,
    @SerializedName("translations") val translations: List<String>
)
# File: ./app/src/main/java/com/example/mynewapplication/data/model/KanjiCollection.kt
package com.example.mynewapplication.data.model

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "kanji_collections")
data class KanjiCollection(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val name: String,
    val kanjiList: String
)
# File: ./app/src/main/java/com/example/mynewapplication/data/repository/KanjiCollectionRepository.kt
package com.example.mynewapplication.data.repository

import com.example.mynewapplication.data.dao.KanjiCollectionDao
import com.example.mynewapplication.data.model.KanjiCollection
import kotlinx.coroutines.flow.Flow

class KanjiCollectionRepository(private val dao: KanjiCollectionDao) {
    fun getAllCollections(): Flow<List<KanjiCollection>> {
        return dao.getAllCollections()
    }

    fun searchCollections(query: String): Flow<List<KanjiCollection>> {
        return dao.searchCollections(query)
    }

    suspend fun insertCollection(collection: KanjiCollection) {
        dao.insertCollection(collection)
    }

    suspend fun updateCollection(collection: KanjiCollection) {
        dao.updateCollection(collection)
    }

    suspend fun deleteCollection(collection: KanjiCollection) {
        dao.deleteCollection(collection)
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/MainActivity.kt
package com.example.mynewapplication

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.viewModels
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.mynewapplication.ui.screens.*
import com.example.mynewapplication.ui.theme.MyNewApplicationTheme
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

class MainActivity : ComponentActivity() {
    private val kanjiViewModel: KanjiViewModel by viewModels()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // Отключаем полноэкранный режим
        WindowCompat.setDecorFitsSystemWindows(window, true)

        // Делаем панель навигации видимой
        val windowInsetsController = WindowCompat.getInsetsController(window, window.decorView)
        windowInsetsController.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
        windowInsetsController.show(androidx.core.view.WindowInsetsCompat.Type.navigationBars())

        setContent {
                val navController = rememberNavController()
                AppNavigation(
                    navController = navController,
                    viewModel = kanjiViewModel
                )
            }
    }
}

@Composable
fun AppNavigation(
    navController: NavHostController,
    viewModel: KanjiViewModel
) {
    NavHost(navController = navController, startDestination = "home") {
        composable("home") {
            HomeScreen(navController = navController, viewModel = viewModel)
        }
        composable("kanji_list") {
            // Replace with your KanjiListScreen composable
            Text("Kanji List Screen Placeholder")
        }
        composable("kanjiDetail/{kanji}") { backStackEntry ->
            val kanji = backStackEntry.arguments?.getString("kanji") ?: ""
            KanjiDetailsScreen(
                kanji = kanji,
                viewModel = viewModel,
                navController = navController
            )
        }
        composable("collections") {
            CollectionsScreen(navController = navController, viewModel = viewModel)
        }
        composable("collection_details/{collectionId}") { backStackEntry ->
            val collectionId = backStackEntry.arguments?.getString("collectionId")?.toIntOrNull() ?: 0
            Text("Collection Details Screen Placeholder for ID: $collectionId")
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/navigation/NavGraph.kt
package com.example.mynewapplication.navigation

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Camera
import androidx.compose.material.icons.filled.CollectionsBookmark
import androidx.compose.material.icons.filled.List
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.currentBackStackEntryAsState
import com.example.mynewapplication.ui.screens.CollectionsScreen
import com.example.mynewapplication.ui.screens.HomeScreen
import com.example.mynewapplication.ui.screens.KanjiDetailsScreen
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@Composable
fun NavGraph(
    navController: NavHostController,
    viewModel: KanjiViewModel
) {
    // Получаем начальное значение темы в composable-контексте
    val initialDarkTheme = isSystemInDarkTheme()
    // Теперь используем remember с начальным значением
    val isDarkTheme = remember { mutableStateOf(initialDarkTheme) }

    // Список пунктов навигации
    val items = listOf(
        Screen.Camera,
        Screen.AllKanji,
        Screen.Collections
    )

    Scaffold(
        bottomBar = {
            NavigationBar(
                tonalElevation = 8.dp
            ) {
                val currentRoute = navController.currentBackStackEntryAsState().value?.destination?.route
                items.forEach { screen ->
                    NavigationBarItem(
                        icon = {
                            Icon(
                                imageVector = when (screen) {
                                    Screen.Camera -> Icons.Default.Camera
                                    Screen.AllKanji -> Icons.Default.List
                                    Screen.Collections -> Icons.Default.CollectionsBookmark
                                },
                                contentDescription = screen.title
                            )
                        },
                        label = { Text(screen.title) },
                        selected = currentRoute == screen.route,
                        onClick = {
                            navController.navigate(screen.route) {
                                // Избегаем накопления одинаковых экранов в стеке
                                popUpTo(navController.graph.startDestinationId) {
                                    saveState = true
                                }
                                launchSingleTop = true
                                restoreState = true
                            }
                        }
                    )
                }
            }
        }
    ) { innerPadding ->
        NavHost(
            navController = navController,
            startDestination = Screen.Camera.route,
            modifier = Modifier.padding(innerPadding)
        ) {
            composable(Screen.Camera.route) {
                HomeScreen(
                    navController = navController,
                    viewModel = viewModel,

                )
            }
            composable(Screen.AllKanji.route) {
                // Временная заглушка для экрана "Все кандзи"
                Text("Экран всех кандзи (заглушка)")
            }
            composable(Screen.Collections.route) {
                CollectionsScreen(navController = navController, viewModel = viewModel)
            }
            composable("kanjiDetail/{kanji}") { backStackEntry ->
                val kanji = backStackEntry.arguments?.getString("kanji") ?: ""
                KanjiDetailsScreen(
                    kanji = kanji,
                    viewModel = viewModel,
                    navController = navController
                )
            }
            composable("collection_details/{collectionId}") { backStackEntry ->
                val collectionId = backStackEntry.arguments?.getString("collectionId")?.toIntOrNull() ?: 0
                Text("Экран деталей коллекции (заглушка) для ID: $collectionId")
            }
        }
    }
}

// Определяем экраны для нижней панели навигации
sealed class Screen(val route: String, val title: String) {
    object Camera : Screen("home", "Камера")
    object AllKanji : Screen("all_kanji", "Все кандзи")
    object Collections : Screen("collections", "Коллекции")
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/AllKanjiScreen.kt
package com.example.mynewapplication.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Search
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun AllKanjiScreen(navController: NavController, viewModel: KanjiViewModel) {
    var searchQuery by remember { mutableStateOf("") }
    var activeSearchQuery by remember { mutableStateOf("") }
    var sortBy by remember { mutableStateOf("strokes") } // strokes, grade
    var filterByGrades by remember { mutableStateOf<Set<String>>(emptySet()) } // фильтр по уровням (grade)
    var filterByStrokes by remember { mutableStateOf<Set<Int>>(emptySet()) } // фильтр по количеству черт

    // Загружаем список иероглифов из viewModel
    val allKanji by remember { mutableStateOf(viewModel.getAllKanji()) }

    // Фильтрация, сортировка и поиск
    val filteredKanji = allKanji
        .filter { kanji ->
            if (activeSearchQuery.isEmpty()) true
            else kanji.kanji.contains(activeSearchQuery, ignoreCase = true) ||
                    kanji.translation.contains(activeSearchQuery, ignoreCase = true) ||
                    kanji.onReadings.any { it.contains(activeSearchQuery, ignoreCase = true) } ||
                    kanji.kunReadings.any { it.contains(activeSearchQuery, ignoreCase = true) } ||
                    kanji.combinations.any { combination ->
                        combination.kanji.contains(activeSearchQuery, ignoreCase = true) ||
                                combination.transcription.contains(activeSearchQuery, ignoreCase = true) ||
                                combination.translations.any { it.contains(activeSearchQuery, ignoreCase = true) }
                    }
        }
        .filter { kanji ->
            if (filterByGrades.isEmpty()) true
            else filterByGrades.contains(kanji.grade)
        }
        .filter { kanji ->
            if (filterByStrokes.isEmpty()) true
            else filterByStrokes.contains(kanji.strokes)
        }
        .sortedWith(
            when (sortBy) {
                "strokes" -> compareBy { it.strokes }
                "grade" -> compareBy { it.grade }
                else -> compareBy { it.kanji }
            }
        )

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Все иероглифы") }
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(padding)
                .padding(horizontal = 16.dp)
        ) {
            // Поле поиска с кнопкой
            TextField(
                value = searchQuery,
                onValueChange = { searchQuery = it },
                label = { Text("Поиск (иероглиф, перевод, чтение, комбинации)") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp),
                trailingIcon = {
                    IconButton(onClick = { activeSearchQuery = searchQuery }) {
                        Icon(
                            imageVector = Icons.Default.Search,
                            contentDescription = "Поиск"
                        )
                    }
                }
            )

            // Фильтр по уровню
            Text(
                text = "Фильтр по уровню:",
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 4.dp)
            )
            LazyRow(
                modifier = Modifier.padding(bottom = 8.dp),
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                // Уникальные значения grade из списка
                val grades = allKanji.map { it.grade }.distinct().sorted()
                item {
                    FilterButton(
                        text = "Все",
                        isSelected = filterByGrades.isEmpty(),
                        onClick = { filterByGrades = emptySet() }
                    )
                }
                items(grades) { grade ->
                    FilterButton(
                        text = grade,
                        isSelected = filterByGrades.contains(grade),
                        onClick = {
                            filterByGrades = if (filterByGrades.contains(grade)) {
                                filterByGrades - grade
                            } else {
                                filterByGrades + grade
                            }
                        }
                    )
                }
            }

            // Фильтр по количеству черт
            Text(
                text = "Фильтр по количеству черт:",
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 4.dp)
            )
            LazyRow(
                modifier = Modifier.padding(bottom = 8.dp),
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                // Уникальные значения strokes из списка
                val strokes = allKanji.map { it.strokes }.distinct().sorted()
                item {
                    FilterButton(
                        text = "Все",
                        isSelected = filterByStrokes.isEmpty(),
                        onClick = { filterByStrokes = emptySet() }
                    )
                }
                items(strokes) { stroke ->
                    FilterButton(
                        text = stroke.toString(),
                        isSelected = filterByStrokes.contains(stroke),
                        onClick = {
                            filterByStrokes = if (filterByStrokes.contains(stroke)) {
                                filterByStrokes - stroke
                            } else {
                                filterByStrokes + stroke
                            }
                        }
                    )
                }
            }

            // Сортировка
            Text(
                text = "Сортировать по:",
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(bottom = 4.dp)
            )
            LazyRow(
                modifier = Modifier.padding(bottom = 8.dp),
                horizontalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                items(listOf("strokes", "grade")) { sortOption ->
                    Button(
                        onClick = { sortBy = sortOption },
                        colors = ButtonDefaults.buttonColors(
                            containerColor = if (sortBy == sortOption) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary
                        )
                    ) {
                        Text(
                            when (sortOption) {
                                "strokes" -> "Чертам"
                                "grade" -> "Уровню"
                                else -> sortOption
                            }
                        )
                    }
                }
            }

            // Список иероглифов
            LazyColumn(
                verticalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                items(filteredKanji) { kanji ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable { navController.navigate("kanjiDetail/${kanji.kanji}") }
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Text(
                                text = kanji.kanji,
                                style = MaterialTheme.typography.headlineMedium
                            )
                            Text(
                                text = "Черты: ${kanji.strokes}, Уровень: ${kanji.grade}",
                                style = MaterialTheme.typography.bodyMedium
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
fun FilterButton(text: String, isSelected: Boolean, onClick: () -> Unit) {
    Button(
        onClick = onClick,
        colors = ButtonDefaults.buttonColors(
            containerColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.secondary
        )
    ) {
        Text(text)
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/CameraPreview.kt
package com.example.mynewapplication.ui.screens

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Matrix
import android.util.Log
import android.view.OrientationEventListener
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageCapture
import androidx.camera.core.ImageCaptureException
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Image
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.runtime.Composable
import androidx.compose.runtime.DisposableEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.lifecycle.LifecycleOwner
import java.util.concurrent.ExecutorService

@Composable
fun CameraPreview(
    lifecycleOwner: LifecycleOwner,
    cameraExecutor: ExecutorService,
    modifier: Modifier = Modifier.fillMaxSize(),
    onImageCaptured: (Bitmap) -> Unit,
    onGalleryClick: () -> Unit
) {
    val context = LocalContext.current
    val cameraProviderFuture = remember { ProcessCameraProvider.getInstance(context) }
    val imageCapture = remember { ImageCapture.Builder().build() }

    // Состояние для хранения текущей ориентации устройства
    var deviceOrientation by remember { mutableIntStateOf(0) }

    // OrientationEventListener для отслеживания ориентации устройства
    val orientationListener = remember {
        object : OrientationEventListener(context) {
            override fun onOrientationChanged(orientation: Int) {
                if (orientation == ORIENTATION_UNKNOWN) return
                deviceOrientation = when {
                    orientation < 45 || orientation >= 315 -> 0    // Портретная (0°)
                    orientation < 135 -> 90                        // Ландшафтная (90°)
                    orientation < 225 -> 180                       // Портретная перевёрнутая (180°)
                    else -> 270                                    // Ландшафтная перевёрнутая (270°)
                }
            }
        }
    }

    // Активируем OrientationEventListener
    DisposableEffect(Unit) {
        orientationListener.enable()
        onDispose {
            orientationListener.disable()
        }
    }

    Box(
        modifier = modifier
    ) {
        AndroidView(
            factory = { ctx ->
                val previewView = PreviewView(ctx)
                val cameraProvider = cameraProviderFuture.get()

                val preview = Preview.Builder().build().also {
                    it.setSurfaceProvider(previewView.surfaceProvider)
                }

                val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

                try {
                    cameraProvider.unbindAll()
                    cameraProvider.bindToLifecycle(
                        lifecycleOwner,
                        cameraSelector,
                        preview,
                        imageCapture
                    )
                } catch (e: Exception) {
                    Log.e("CameraPreview", "Error binding camera: ${e.message}", e)
                }

                previewView
            },
            modifier = Modifier.fillMaxSize()
        )

        // Линейка кнопок внизу
        Row(
            modifier = Modifier
                .align(Alignment.BottomCenter)
                .padding(bottom = 16.dp),
            horizontalArrangement = Arrangement.spacedBy(8.dp), // Расстояние между кнопками 8.dp
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Круглая кнопка выбора из галереи
            IconButton(
                onClick = {
                    Log.d("CameraPreview", "Gallery button clicked")
                    onGalleryClick()
                },
                modifier = Modifier
                    .size(48.dp)
                    .background(
                        color = MaterialTheme.colorScheme.primary,
                        shape = CircleShape
                    )
            ) {
                Icon(
                    imageVector = Icons.Default.Image,
                    contentDescription = "Выбрать из галереи",
                    tint = MaterialTheme.colorScheme.onPrimary
                )
            }

            // Кнопка захвата изображения
            Button(
                onClick = {
                    Log.d("CameraPreview", "Capture button clicked")
                    val outputOptions = ImageCapture.OutputFileOptions.Builder(
                        context.contentResolver,
                        android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                        android.content.ContentValues()
                    ).build()

                    imageCapture.takePicture(
                        outputOptions,
                        cameraExecutor,
                        object : ImageCapture.OnImageSavedCallback {
                            override fun onImageSaved(output: ImageCapture.OutputFileResults) {
                                Log.d("CameraPreview", "Image saved, URI: ${output.savedUri}")
                                output.savedUri?.let { uri ->
                                    val inputStream = context.contentResolver.openInputStream(uri)
                                    if (inputStream != null) {
                                        val bitmap = BitmapFactory.decodeStream(inputStream)
                                        inputStream.close()
                                        if (bitmap != null) {
                                            // Поворачиваем изображение в зависимости от ориентации устройства
                                            val matrix = Matrix()
                                            matrix.postRotate(deviceOrientation.toFloat())
                                            val rotatedBitmap = Bitmap.createBitmap(
                                                bitmap,
                                                0,
                                                0,
                                                bitmap.width,
                                                bitmap.height,
                                                matrix,
                                                true
                                            )
                                            bitmap.recycle() // Освобождаем исходный bitmap
                                            Log.d("CameraPreview", "Bitmap decoded and rotated successfully")
                                            onImageCaptured(rotatedBitmap)
                                        } else {
                                            Log.e("CameraPreview", "Failed to decode bitmap from URI: $uri")
                                        }
                                    } else {
                                        Log.e("CameraPreview", "Failed to open input stream for URI: $uri")
                                    }
                                } ?: run {
                                    Log.e("CameraPreview", "Saved URI is null")
                                }
                            }

                            override fun onError(exception: ImageCaptureException) {
                                Log.e("CameraPreview", "Error capturing image: ${exception.message}", exception)
                            }
                        }
                    )
                }
            ) {
                Text("Сделать фото")
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/CameraScreen.kt
package com.example.mynewapplication.ui.screens

import android.Manifest
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import coil.compose.rememberAsyncImagePainter
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel
import com.google.accompanist.permissions.ExperimentalPermissionsApi
import com.google.accompanist.permissions.isGranted
import com.google.accompanist.permissions.rememberPermissionState
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import androidx.core.graphics.scale

@OptIn(ExperimentalPermissionsApi::class)
@Composable
fun CameraScreen(
    navController: NavController,
    viewModel: KanjiViewModel,
    coroutineScope: CoroutineScope
) {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current

    // Разрешение на доступ к камере
    val cameraPermissionState = rememberPermissionState(Manifest.permission.CAMERA)

    // Разрешение на доступ к галерее
    val storagePermissionState = rememberPermissionState(
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
            Manifest.permission.READ_MEDIA_IMAGES
        } else {
            Manifest.permission.READ_EXTERNAL_STORAGE
        }
    )

    // Состояние для отображения ошибки доступа к камере
    var showCameraError by remember { mutableStateOf(false) }

    // Состояние для отображения ошибки доступа к галерее
    var showStorageError by remember { mutableStateOf(false) }

    // Флаг для отслеживания попытки распознавания
    var hasAttemptedRecognition by remember { mutableStateOf(false) }

    // Состояние для захваченного изображения
    var capturedBitmap by remember { mutableStateOf<Bitmap?>(null) }

    // Executor для камеры
    val cameraExecutor: ExecutorService = remember { Executors.newSingleThreadExecutor() }

    // Состояние распознавания иероглифов
    val recognizedKanji by viewModel.recognizedKanji.collectAsState()
    val isRecognizing by viewModel.isRecognizing.collectAsState()

    // Лаунчер для выбора изображения из галереи
    val galleryLauncher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri ->
        uri?.let {
            try {
                val inputStream = context.contentResolver.openInputStream(it)
                val bitmap = BitmapFactory.decodeStream(inputStream)
                inputStream?.close()
                if (bitmap != null) {
                    // Масштабируем изображение перед передачей
                    val scaledBitmap = scaleBitmap(bitmap, 1000, 750)
                    hasAttemptedRecognition = true
                    viewModel.recognizeKanji(scaledBitmap)
                    bitmap.recycle()
                }
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    LaunchedEffect(Unit) {
        if (!cameraPermissionState.status.isGranted) {
            cameraPermissionState.launchPermissionRequest()
        }
        if (!storagePermissionState.status.isGranted) {
            storagePermissionState.launchPermissionRequest()
        }
    }

    LaunchedEffect(recognizedKanji) {
        if (!isRecognizing && recognizedKanji.isNotEmpty()) {
            // Переходим на страницу списка иероглифов
            coroutineScope.launch(Dispatchers.Main) {
                navController.navigate("kanji_list")
            }
            capturedBitmap = null // Сбрасываем захваченное изображение после перехода
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        contentAlignment = Alignment.Center
    ) {
        if (cameraPermissionState.status.isGranted) {
            if (capturedBitmap == null) {
                // Показываем предпросмотр камеры, если изображение не захвачено
                CameraPreview(
                    lifecycleOwner = lifecycleOwner,
                    cameraExecutor = cameraExecutor,
                    modifier = Modifier.fillMaxSize(),
                    onImageCaptured = { bitmap ->
                        capturedBitmap = bitmap // Сохраняем захваченное изображение
                        hasAttemptedRecognition = true
                        viewModel.recognizeKanji(bitmap)
                    },
                    onGalleryClick = {
                        if (storagePermissionState.status.isGranted) {
                            galleryLauncher.launch("image/*")
                        } else {
                            storagePermissionState.launchPermissionRequest()
                            if (!storagePermissionState.status.isGranted) {
                                showStorageError = true
                            }
                        }
                    }
                )
            } else {
                // Показываем захваченное изображение
                Image(
                    painter = rememberAsyncImagePainter(capturedBitmap),
                    contentDescription = "Захваченное изображение",
                    modifier = Modifier.fillMaxSize()
                )

                // Кнопка для нового захвата
                Row(
                    modifier = Modifier
                        .align(Alignment.BottomCenter)
                        .padding(bottom = 16.dp),
                    horizontalArrangement = Arrangement.spacedBy(8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Button(
                        onClick = {
                            capturedBitmap = null
                            hasAttemptedRecognition = false
                        }
                    ) {
                        Text("Сделать фото")
                    }
                }
            }

            when {
                isRecognizing -> {
                    // Показываем индикатор загрузки, пока идёт распознавание
                    CircularProgressIndicator()
                }
                hasAttemptedRecognition && recognizedKanji.isEmpty() -> {
                    // Показываем сообщение только после попытки распознавания
                    Text(
                        text = "Иероглифы не распознаны",
                        style = MaterialTheme.typography.bodyLarge,
                        modifier = Modifier.align(Alignment.Center)
                    )
                }
            }
        } else {
            if (showCameraError) {
                Text(
                    text = "Нет доступа к камере. Пожалуйста, предоставьте разрешение.",
                    style = MaterialTheme.typography.bodyLarge,
                    modifier = Modifier.align(Alignment.Center)
                )
            } else {
                Button(
                    onClick = {
                        if (!cameraPermissionState.status.isGranted) {
                            cameraPermissionState.launchPermissionRequest()
                        }
                        if (!cameraPermissionState.status.isGranted) {
                            showCameraError = true
                        }
                    },
                    modifier = Modifier.align(Alignment.Center)
                ) {
                    Text("Запросить доступ к камере")
                }
            }
        }

        if (showStorageError) {
            Text(
                text = "Нет доступа к галерее. Пожалуйста, предоставьте разрешение.",
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.align(Alignment.Center)
            )
        }
    }

    DisposableEffect(Unit) {
        onDispose {
            cameraExecutor.shutdown()
        }
    }
}

private fun scaleBitmap(bitmap: Bitmap, maxWidth: Int, maxHeight: Int): Bitmap {
    val width = bitmap.width
    val height = bitmap.height

    // Вычисляем коэффициент масштабирования
    val scale = minOf(maxWidth.toFloat() / width, maxHeight.toFloat() / height)

    // Если масштабирование не требуется, возвращаем исходный битмап
    if (scale >= 1) return bitmap

    val newWidth = (width * scale).toInt()
    val newHeight = (height * scale).toInt()

    return bitmap.scale(newWidth, newHeight)
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/CollectionDetailsScreen.kt
package com.example.mynewapplication.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun CollectionDetailsScreen(collectionId: Int, navController: NavController, viewModel: KanjiViewModel) {
    val collections by viewModel.collections.collectAsState()
    val collection = collections.find { it.id == collectionId }

    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text(collection?.name ?: "Collection Details") },
                navigationIcon = {
                    TextButton(onClick = { navController.popBackStack() }) {
                        Text("Back")
                    }
                }
            )
        }
    ) { padding ->
        if (collection == null) {
            Text(
                text = "Collection not found",
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier
                    .padding(padding)
                    .padding(16.dp)
            )
        } else {
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(padding)
                    .padding(16.dp)
            ) {
                Text(
                    text = "Kanji in ${collection.name}",
                    style = MaterialTheme.typography.titleLarge,
                    modifier = Modifier.padding(bottom = 8.dp)
                )
                val kanjiList = collection.kanjiList.split(",").filter { it.isNotEmpty() }
                if (kanjiList.isEmpty()) {
                    Text(
                        text = "No kanji in this collection yet.",
                        style = MaterialTheme.typography.bodyMedium,
                        modifier = Modifier.padding(16.dp)
                    )
                } else {
                    LazyRow(
                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                    ) {
                        items(kanjiList) { kanji ->
                            Card(
                                modifier = Modifier
                                    .clickable { navController.navigate("kanjiDetail/$kanji") }
                                    .padding(4.dp)
                            ) {
                                Text(
                                    text = kanji,
                                    style = MaterialTheme.typography.headlineMedium,
                                    modifier = Modifier.padding(16.dp)
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/CollectionsScreen.kt
package com.example.mynewapplication.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@Composable
fun CollectionsScreen(navController: NavController, viewModel: KanjiViewModel) {
    var searchQuery by remember { mutableStateOf("") }
    var sortBy by remember { mutableStateOf("name") } // name, count, date
    val collections by viewModel.collections.collectAsState()
    var showCreateDialog by remember { mutableStateOf(false) }
    var newCollectionName by remember { mutableStateOf("") }

    // Сортировка коллекций
    val sortedCollections = when (sortBy) {
        "count" -> collections.sortedByDescending { it.kanjiList.split(",").size }
        "date" -> collections.sortedByDescending { it.id }
        else -> collections.sortedBy { it.name }
    }

    Column(modifier = Modifier.padding(16.dp)) {
        Text(
            text = "Коллекции",
            style = MaterialTheme.typography.headlineLarge,
            color = MaterialTheme.colorScheme.primary,
            modifier = Modifier.padding(bottom = 8.dp)
        )
        TextField(
            value = searchQuery,
            onValueChange = {
                searchQuery = it
                viewModel.searchCollections(it)
            },
            label = { Text("Поиск коллекций") },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp)
        )
        Text(
            text = "Сортировать по:",
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier.padding(bottom = 4.dp)
        )
        LazyRow(
            modifier = Modifier.padding(bottom = 8.dp),
            horizontalArrangement = Arrangement.spacedBy(4.dp)
        ) {
            items(listOf("name", "count", "date")) { sortOption ->
                Button(
                    onClick = { sortBy = sortOption },
                    modifier = Modifier.wrapContentWidth()
                ) {
                    Text(
                        text = when (sortOption) {
                            "name" -> "Названию"
                            "count" -> "Кол-ву кандзи"
                            "date" -> "Дате"
                            else -> sortOption
                        },
                        fontSize = 14.sp,
                        textAlign = TextAlign.Center
                    )
                }
            }
        }

        // Кнопка создания новой коллекции
        Button(
            onClick = { showCreateDialog = true },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp)
        ) {
            Text("Создать новую коллекцию")
        }

        // Диалог для создания новой коллекции
        if (showCreateDialog) {
            AlertDialog(
                onDismissRequest = {
                    showCreateDialog = false
                    newCollectionName = ""
                },
                title = { Text("Создать коллекцию") },
                text = {
                    TextField(
                        value = newCollectionName,
                        onValueChange = { newCollectionName = it },
                        label = { Text("Название коллекции") },
                        modifier = Modifier.fillMaxWidth()
                    )
                },
                confirmButton = {
                    Button(
                        onClick = {
                            if (newCollectionName.isNotBlank()) {
                                viewModel.createCollection(newCollectionName, "")
                                showCreateDialog = false
                                newCollectionName = ""
                            }
                        },
                        enabled = newCollectionName.isNotBlank()
                    ) {
                        Text("Создать")
                    }
                },
                dismissButton = {
                    Button(
                        onClick = {
                            showCreateDialog = false
                            newCollectionName = ""
                        }
                    ) {
                        Text("Отмена")
                    }
                }
            )
        }

        if (sortedCollections.isEmpty()) {
            Text(
                text = "Коллекций пока нет. Добавьте иероглифы в коллекцию через экран информации об иероглифе!",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.Gray,
                modifier = Modifier.padding(16.dp)
            )
        } else {
            LazyColumn {
                items(sortedCollections) { collection ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp)
                            .clickable {
                                navController.navigate("collection_details/${collection.id}")
                            },
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant
                        ),
                        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                    ) {
                        Column(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp)
                        ) {
                            Text(
                                text = collection.name,
                                style = MaterialTheme.typography.titleMedium,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            // Для коллекции "Распознанные кандзи" отображаем только уникальные иероглифы
                            val kanjiList = if (collection.name == "Распознанные кандзи") {
                                collection.kanjiList.split(",").distinct().filter { it.isNotEmpty() }
                            } else {
                                collection.kanjiList.split(",").filter { it.isNotEmpty() }
                            }
                            if (kanjiList.isNotEmpty()) {
                                LazyColumn(
                                    modifier = Modifier.heightIn(max = 100.dp),
                                    verticalArrangement = Arrangement.spacedBy(4.dp)
                                ) {
                                    items(kanjiList) { kanji ->
                                        Text(
                                            text = kanji,
                                            style = MaterialTheme.typography.bodyMedium,
                                            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)
                                        )
                                    }
                                }
                            } else {
                                Text(
                                    text = "Иероглифов пока нет",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/HomeScreen.kt
package com.example.mynewapplication.ui.screens

import android.Manifest
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.util.Log
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalLifecycleOwner
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import androidx.navigation.NavController
import coil.compose.rememberAsyncImagePainter
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel
import com.google.accompanist.permissions.ExperimentalPermissionsApi
import com.google.accompanist.permissions.isGranted
import com.google.accompanist.permissions.rememberPermissionState
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import androidx.core.graphics.scale

@OptIn(ExperimentalPermissionsApi::class)
@Composable
fun HomeScreen(navController: NavController, viewModel: KanjiViewModel) {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current

    // Разрешение на доступ к камере
    val cameraPermissionState = rememberPermissionState(Manifest.permission.CAMERA)

    // Разрешение на доступ к галерее
    val storagePermissionState = rememberPermissionState(
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.TIRAMISU) {
            Manifest.permission.READ_MEDIA_IMAGES
        } else {
            Manifest.permission.READ_EXTERNAL_STORAGE
        }
    )

    // Состояние для отображения ошибки доступа к камере
    var showCameraError by remember { mutableStateOf(false) }

    // Состояние для отображения ошибки доступа к галерее
    var showStorageError by remember { mutableStateOf(false) }

    // Флаг для отслеживания попытки распознавания
    var hasAttemptedRecognition by remember { mutableStateOf(false) }

    // Состояние для захваченного изображения
    var capturedBitmap by remember { mutableStateOf<Bitmap?>(null) }

    // Executor для камеры
    val cameraExecutor: ExecutorService = remember { Executors.newSingleThreadExecutor() }

    // Состояние распознавания иероглифов
    val recognizedKanji by viewModel.recognizedKanji.collectAsState()
    val isRecognizing by viewModel.isRecognizing.collectAsState()

    // Лаунчер для выбора изображения из галереи
    val galleryLauncher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri ->
        uri?.let {
            try {
                val inputStream = context.contentResolver.openInputStream(it)
                val bitmap = BitmapFactory.decodeStream(inputStream)
                inputStream?.close()
                if (bitmap != null) {
                    // Масштабируем изображение перед передачей
                    val scaledBitmap = scaleBitmap(bitmap, 1000, 750)
                    hasAttemptedRecognition = true
                    viewModel.recognizeKanji(scaledBitmap)
                    bitmap.recycle()
                }
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    LaunchedEffect(Unit) {
        if (!cameraPermissionState.status.isGranted) {
            cameraPermissionState.launchPermissionRequest()
        }
        if (!storagePermissionState.status.isGranted) {
            storagePermissionState.launchPermissionRequest()
        }
    }

    LaunchedEffect(recognizedKanji) {
        if (!isRecognizing && recognizedKanji.isNotEmpty()) {
            // Переходим на страницу первого распознанного иероглифа
            navController.navigate("kanjiDetail/${recognizedKanji.first()}")
            capturedBitmap = null // Сбрасываем захваченное изображение после перехода
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        contentAlignment = Alignment.Center
    ) {
        if (cameraPermissionState.status.isGranted) {
            if (capturedBitmap == null) {
                // Показываем предпросмотр камеры, если изображение не захвачено
                CameraPreview(
                    lifecycleOwner = lifecycleOwner,
                    cameraExecutor = cameraExecutor,
                    modifier = Modifier.fillMaxSize(),
                    onImageCaptured = { bitmap ->
                        Log.d("HomeScreen", "Image captured successfully")
                        capturedBitmap = bitmap // Сохраняем захваченное изображение
                        hasAttemptedRecognition = true
                        viewModel.recognizeKanji(bitmap)
                    },
                    onGalleryClick = {
                        if (storagePermissionState.status.isGranted) {
                            galleryLauncher.launch("image/*")
                        } else {
                            storagePermissionState.launchPermissionRequest()
                            if (!storagePermissionState.status.isGranted) {
                                showStorageError = true
                            }
                        }
                    }
                )
            } else {
                // Показываем захваченное изображение
                Image(
                    painter = rememberAsyncImagePainter(capturedBitmap),
                    contentDescription = "Захваченное изображение",
                    modifier = Modifier.fillMaxSize()
                )

                // Кнопка для нового захвата
                Row(
                    modifier = Modifier
                        .align(Alignment.BottomCenter)
                        .padding(bottom = 16.dp),
                    horizontalArrangement = Arrangement.spacedBy(8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Button(
                        onClick = {
                            Log.d("HomeScreen", "Capture button clicked")
                            capturedBitmap = null
                            hasAttemptedRecognition = false
                        }
                    ) {
                        Text("Сделать фото")
                    }
                }
            }

            when {
                isRecognizing -> {
                    // Показываем индикатор загрузки, пока идёт распознавание
                    CircularProgressIndicator()
                }
                hasAttemptedRecognition && recognizedKanji.isEmpty() -> {
                    // Показываем сообщение только после попытки распознавания
                    Text(
                        text = "Иероглифы не распознаны",
                        style = MaterialTheme.typography.bodyLarge,
                        modifier = Modifier.align(Alignment.Center)
                    )
                }
            }
        } else {
            if (showCameraError) {
                Text(
                    text = "Нет доступа к камере. Пожалуйста, предоставьте разрешение.",
                    style = MaterialTheme.typography.bodyLarge,
                    modifier = Modifier.align(Alignment.Center)
                )
            } else {
                Button(
                    onClick = {
                        if (!cameraPermissionState.status.isGranted) {
                            cameraPermissionState.launchPermissionRequest()
                        }
                        if (!cameraPermissionState.status.isGranted) {
                            showCameraError = true
                        }
                    },
                    modifier = Modifier.align(Alignment.Center)
                ) {
                    Text("Запросить доступ к камере")
                }
            }
        }

        if (showStorageError) {
            Text(
                text = "Нет доступа к галерее. Пожалуйста, предоставьте разрешение.",
                style = MaterialTheme.typography.bodyLarge,
                modifier = Modifier.align(Alignment.Center)
            )
        }
    }

    DisposableEffect(Unit) {
        onDispose {
            cameraExecutor.shutdown()
        }
    }
}

private fun scaleBitmap(bitmap: Bitmap, maxWidth: Int, maxHeight: Int): Bitmap {
    val width = bitmap.width
    val height = bitmap.height

    // Вычисляем коэффициент масштабирования
    val scale = minOf(maxWidth.toFloat() / width, maxHeight.toFloat() / height)

    // Если масштабирование не требуется, возвращаем исходный битмап
    if (scale >= 1) return bitmap

    val newWidth = (width * scale).toInt()
    val newHeight = (height * scale).toInt()

    return bitmap.scale(newWidth, newHeight)
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/ImagePickerScreen.kt
package com.example.mynewapplication.ui.screens

import android.Manifest
import android.content.pm.PackageManager
import android.graphics.BitmapFactory
import android.os.Build
import android.provider.MediaStore
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.PickVisualMediaRequest
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@Composable
fun ImagePickerScreen(navController: NavController, viewModel: KanjiViewModel) {
    val context = LocalContext.current
    var hasStoragePermission by remember { mutableStateOf(false) }
    var shouldShowPermissionRationale by remember { mutableStateOf(false) }

    // Разрешение для доступа к изображениям
    val storagePermission = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
        Manifest.permission.READ_MEDIA_IMAGES
    } else {
        Manifest.permission.READ_EXTERNAL_STORAGE
    }

    // Запрос разрешения
    val permissionLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        hasStoragePermission = isGranted
        if (!isGranted) {
            shouldShowPermissionRationale = ContextCompat.checkSelfPermission(
                context,
                storagePermission
            ) == PackageManager.PERMISSION_DENIED
        }
    }

    // Запуск выбора изображения через PickVisualMedia
    val pickMediaLauncher = rememberLauncherForActivityResult(ActivityResultContracts.PickVisualMedia()) { uri ->
        uri?.let {
            val bitmap = BitmapFactory.decodeStream(context.contentResolver.openInputStream(it))
            viewModel.recognizeKanji(bitmap)
        }
    }

    // Проверка разрешения при запуске экрана
    LaunchedEffect(Unit) {
        hasStoragePermission = ContextCompat.checkSelfPermission(
            context,
            storagePermission
        ) == PackageManager.PERMISSION_GRANTED
        if (!hasStoragePermission) {
            permissionLauncher.launch(storagePermission)
        }
    }

    Column(modifier = Modifier.padding(16.dp)) {
        if (hasStoragePermission) {
            // Проверяем поддержку Selected Photos Access на Android 14+
            val maxImages = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                MediaStore.getPickImagesMaxLimit()
            } else {
                1 // На старых версиях Android выбираем только одно изображение
            }

            Button(
                onClick = {
                    val request = PickVisualMediaRequest.Builder()
                        .setMediaType(ActivityResultContracts.PickVisualMedia.ImageOnly)
                        .build()
                    pickMediaLauncher.launch(request)
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Выбрать изображение из галереи (максимум: $maxImages)")
            }
            Spacer(modifier = Modifier.height(16.dp))
            // Отображение распознанных кандзи
            val recognizedKanji by viewModel.recognizedKanji.collectAsState()
            LazyColumn {
                items(recognizedKanji) { kanji ->
                    Text(
                        text = kanji,
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable {
                                navController.navigate("kanji_details/$kanji")
                            }
                            .padding(8.dp)
                    )
                }
            }
        } else {
            Text(
                text = if (shouldShowPermissionRationale) {
                    "Разрешение на доступ к изображениям необходимо для выбора фото. Пожалуйста, предоставьте разрешение в настройках."
                } else {
                    "Требуется разрешение на доступ к изображениям."
                },
                modifier = Modifier.padding(16.dp)
            )
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/KanjiDetailsScreen.kt
package com.example.mynewapplication.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import coil.compose.AsyncImage
import coil.request.ImageRequest
import coil.decode.GifDecoder
import coil.decode.ImageDecoderDecoder
import com.example.mynewapplication.data.model.Kanji
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun KanjiDetailsScreen(
    kanji: String,
    viewModel: KanjiViewModel,
    navController: NavController
) {
    val context = LocalContext.current
    val kanjiData = viewModel.getKanjiBySymbol(kanji) ?: Kanji(
        kanji = kanji,
        translation = "Неизвестный иероглиф",
        onReadings = emptyList(),
        kunReadings = emptyList(),
        radical = "",
        strokes = 0,
        grade = "",
        gifPath = null,
        combinations = emptyList()
    )

    val collections by viewModel.collections.collectAsState()
    var showDialog by remember { mutableStateOf(false) }
    val selectedCollections = remember { mutableStateListOf<Int>() } // Список для хранения выбранных коллекций

    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.Start
    ) {
        item {
            Text(
                text = kanjiData.kanji,
                style = MaterialTheme.typography.headlineLarge
            )
            Spacer(modifier = Modifier.height(8.dp))

            // Отображаем GIF, если он есть
            kanjiData.gifPath?.let { gifPath ->
                AsyncImage(
                    model = ImageRequest.Builder(context)
                        .data("file:///android_asset/$gifPath")
                        .allowHardware(false) // Отключаем аппаратное ускорение
                        .decoderFactory { result, options, _ ->
                            if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.P) {
                                ImageDecoderDecoder(result.source, options)
                            } else {
                                GifDecoder(result.source, options)
                            }
                        }
                        .build(),
                    contentDescription = "GIF анимация написания иероглифа",
                    modifier = Modifier.size(128.dp)
                )
                Spacer(modifier = Modifier.height(8.dp))
            }

            Text(
                text = "Перевод: ${kanjiData.translation}",
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "Чтения он: ${if (kanjiData.onReadings.isEmpty()) "Нет" else kanjiData.onReadings.joinToString(", ")}",
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "Чтения кун: ${if (kanjiData.kunReadings.isEmpty()) "Нет" else kanjiData.kunReadings.joinToString(", ")}",
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "Радикал: ${kanjiData.radical}",
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "Черты: ${kanjiData.strokes}",
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text(
                text = "Уровень: ${kanjiData.grade}",
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.height(16.dp))

            // Кнопка "Добавить в коллекцию"
            Button(
                onClick = {
                    if (collections.isNotEmpty()) {
                        showDialog = true
                    }
                },
                modifier = Modifier.fillMaxWidth(),
                enabled = collections.isNotEmpty()
            ) {
                Text("Добавить в коллекцию")
            }
            Spacer(modifier = Modifier.height(16.dp))

            // Диалог для выбора коллекций
            if (showDialog) {
                AlertDialog(
                    onDismissRequest = {
                        showDialog = false
                        selectedCollections.clear()
                    },
                    title = { Text("Выберите коллекции") },
                    text = {
                        LazyColumn {
                            items(collections) { collection ->
                                Row(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(vertical = 4.dp),
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Checkbox(
                                        checked = collection.id in selectedCollections,
                                        onCheckedChange = { isChecked ->
                                            if (isChecked) {
                                                selectedCollections.add(collection.id)
                                            } else {
                                                selectedCollections.remove(collection.id)
                                            }
                                        }
                                    )
                                    Text(
                                        text = collection.name,
                                        modifier = Modifier.padding(start = 8.dp)
                                    )
                                }
                            }
                        }
                    },
                    confirmButton = {
                        Button(
                            onClick = {
                                selectedCollections.forEach { collectionId ->
                                    val collection = collections.find { it.id == collectionId }
                                    collection?.let {
                                        viewModel.addToCollection(it, kanjiData.kanji)
                                    }
                                }
                                showDialog = false
                                selectedCollections.clear()
                            },
                            enabled = selectedCollections.isNotEmpty()
                        ) {
                            Text("Добавить")
                        }
                    },
                    dismissButton = {
                        Button(
                            onClick = {
                                showDialog = false
                                selectedCollections.clear()
                            }
                        ) {
                            Text("Отмена")
                        }
                    }
                )
            }

            // Отображаем примеры сочетаний как текст
            if (kanjiData.combinations.isNotEmpty()) {
                Text(
                    text = "Примеры сочетаний:",
                    style = MaterialTheme.typography.titleMedium
                )
                Spacer(modifier = Modifier.height(8.dp))
            }
        }
        items(kanjiData.combinations) { combination ->
            Text(
                text = "${combination.kanji} (${combination.transcription}) - ${combination.translations.joinToString(", ")}",
                style = MaterialTheme.typography.bodyMedium
            )
            Spacer(modifier = Modifier.height(4.dp))
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/KanjiListScreen.kt
package com.example.mynewapplication.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun KanjiListScreen(viewModel: KanjiViewModel, navController: NavController) {
    val collections by viewModel.collections.collectAsState()
    var selectedCollection by remember { mutableStateOf(collections.firstOrNull()) }
    var expanded by remember { mutableStateOf(false) } // Добавляем состояние для раскрытия меню

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Dropdown для выбора коллекции
        ExposedDropdownMenuBox(
            expanded = expanded,
            onExpandedChange = { expanded = !expanded },
            modifier = Modifier.fillMaxWidth()
        ) {
            TextField(
                value = selectedCollection?.name ?: "Выберите коллекцию",
                onValueChange = {},
                readOnly = true,
                modifier = Modifier
                    .fillMaxWidth()
                    .menuAnchor(
                        type = MenuAnchorType.PrimaryNotEditable,
                        enabled = true
                    )
            )
            ExposedDropdownMenu(
                expanded = expanded,
                onDismissRequest = { expanded = false }
            ) {
                collections.forEach { collection ->
                    DropdownMenuItem(
                        text = { Text(collection.name) },
                        onClick = {
                            selectedCollection = collection
                            expanded = false
                        }
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        selectedCollection?.let { collection ->
            val kanjiList = collection.kanjiList.split(",").filter { it.isNotEmpty() }
            LazyColumn {
                items(kanjiList) { kanji ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp)
                            .clickable {
                                navController.navigate("kanji_details/$kanji")
                            }
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Text(text = kanji)
                            Button(
                                onClick = {
                                    viewModel.removeFromCollection(collection, kanji)
                                }
                            ) {
                                Text("Удалить")
                            }
                        }
                    }
                }
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/theme/Color.kt
package com.example.mynewapplication.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)
# File: ./app/src/main/java/com/example/mynewapplication/ui/theme/Theme.kt
package com.example.mynewapplication.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80,
    background = Color(0xFF1C1B1F),
    surface = Color(0xFF1C1B1F),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color.White,
    onSurface = Color.White
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40,
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color.Black,
    onSurface = Color.Black
)

@Composable
fun MyNewApplicationTheme(
    isDarkTheme: Boolean, // Теперь передаём isDarkTheme как параметр
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (isDarkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }
        isDarkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/theme/Type.kt
package com.example.mynewapplication.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)
# File: ./app/src/main/java/com/example/mynewapplication/ui/viewmodel/KanjiViewModel.kt
package com.example.mynewapplication.ui.viewmodel

import android.app.Application
import android.content.Context
import android.graphics.Bitmap
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.mynewapplication.data.db.AppDatabase
import com.example.mynewapplication.data.model.Kanji
import com.example.mynewapplication.data.model.KanjiCollection
import com.example.mynewapplication.data.repository.KanjiCollectionRepository
import com.googlecode.tesseract.android.TessBaseAPI
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withTimeoutOrNull
import java.io.File
import java.io.FileOutputStream
import java.io.IOException

class KanjiViewModel(application: Application) : AndroidViewModel(application) {

    private val repository: KanjiCollectionRepository
    private val _collections = MutableStateFlow<List<KanjiCollection>>(emptyList())
    val collections = _collections.asStateFlow()

    private val _recognizedKanji = MutableStateFlow<List<String>>(emptyList())
    val recognizedKanji = _recognizedKanji.asStateFlow()

    private val _isRecognizing = MutableStateFlow(false)
    val isRecognizing = _isRecognizing.asStateFlow()

    private var tessBaseAPI: TessBaseAPI? = null
    private var allKanji: List<Kanji> = emptyList()

    init {
        val db = AppDatabase.getDatabase(application)
        repository = KanjiCollectionRepository(db.kanjiCollectionDao())
        initializeTesseract(application)
        fetchCollections()
        loadKanjiData(application)
        createCapturedKanjiCollectionIfNotExists() // Создаём пустую коллекцию "Распознанные кандзи"
    }

    private fun createCapturedKanjiCollectionIfNotExists() {
        viewModelScope.launch {
            val existingCollection = collections.value.find { it.name == "Распознанные кандзи" }
            if (existingCollection == null) {
                val newCollection = KanjiCollection(name = "Распознанные кандзи", kanjiList = "")
                repository.insertCollection(newCollection)
                Log.d("KanjiViewModel", "Created empty Распознанные кандзи collection")
            }
        }
    }

    private fun initializeTesseract(context: Context) {
        try {
            tessBaseAPI = TessBaseAPI()
            val dataPath = File(context.filesDir, "tesseract").absolutePath
            val tessDataPath = File(dataPath, "tessdata").absolutePath

            // Копируем tessdata из assets в filesDir
            val tessDataDir = File(tessDataPath)
            val trainedDataFile = File(tessDataPath, "jpn.traineddata")
            if (!tessDataDir.exists()) {
                tessDataDir.mkdirs()
                Log.d("KanjiViewModel", "Created tessdata directory: $tessDataPath")
            }
            if (!trainedDataFile.exists()) {
                val assetManager = context.assets
                try {
                    val inputStream = assetManager.open("tessdata/jpn.traineddata")
                    val outputStream = FileOutputStream(trainedDataFile)
                    inputStream.copyTo(outputStream)
                    inputStream.close()
                    outputStream.close()
                    Log.d("KanjiViewModel", "Tessdata copied successfully to $trainedDataFile")
                } catch (e: IOException) {
                    Log.e("KanjiViewModel", "Failed to copy tessdata from assets", e)
                    tessBaseAPI = null
                    return
                }
            } else {
                Log.d("KanjiViewModel", "Tessdata already exists at $trainedDataFile")
            }

            // Инициализируем Tesseract с jpn
            val initialized = tessBaseAPI!!.init(dataPath, "jpn")
            if (!initialized) {
                Log.e("KanjiViewModel", "Could not initialize Tesseract")
                tessBaseAPI = null
            } else {
                Log.d("KanjiViewModel", "Tesseract initialized successfully")
            }
        } catch (e: Exception) {
            Log.e("KanjiViewModel", "Error initializing Tesseract", e)
            tessBaseAPI = null
        }
    }

    private fun loadKanjiData(context: Context) {
        try {
            val json = context.assets.open("kanji_database.json")
                .bufferedReader()
                .use { it.readText() }
            val type = object : TypeToken<List<Kanji>>() {}.type
            allKanji = Gson().fromJson(json, type)
            Log.d("KanjiViewModel", "Loaded ${allKanji.size} kanji from kanji_database.json")
        } catch (e: Exception) {
            Log.e("KanjiViewModel", "Error loading kanji data: ${e.message}", e)
            allKanji = emptyList()
        }
    }

    fun getKanjiBySymbol(symbol: String): Kanji? {
        return allKanji.find { it.kanji == symbol }
    }

    fun getAllKanji(): List<Kanji> {
        return allKanji
    }

    fun recognizeKanji(bitmap: Bitmap) {
        _isRecognizing.value = true // Устанавливаем состояние "загрузка"
        viewModelScope.launch(Dispatchers.IO) {
            try {
                Log.d("KanjiViewModel", "Starting recognizeKanji with bitmap: ${bitmap.width}x${bitmap.height}")
                if (tessBaseAPI == null) {
                    Log.e("KanjiViewModel", "Tesseract is not initialized")
                    _recognizedKanji.value = emptyList()
                    _isRecognizing.value = false
                    return@launch
                }

                // Устанавливаем изображение для распознавания
                Log.d("KanjiViewModel", "Setting image for Tesseract")
                tessBaseAPI!!.setImage(bitmap)

                // Добавляем тайм-аут для распознавания
                val recognizedText = withTimeoutOrNull(10000) { // 10 секунд тайм-аут
                    tessBaseAPI!!.utF8Text
                }

                if (recognizedText == null) {
                    Log.e("KanjiViewModel", "Tesseract recognition timed out after 10 seconds")
                    _recognizedKanji.value = emptyList()
                    _isRecognizing.value = false
                    return@launch
                }

                Log.d("KanjiViewModel", "Raw Tesseract output: '$recognizedText'")

                // Разделяем текст на отдельные иероглифы
                val cleanedText = recognizedText
                    .replace("\n", "")
                    .replace(" ", "")
                Log.d("KanjiViewModel", "Cleaned text after removing newlines and spaces: '$cleanedText'")

                val splitText = cleanedText.split("")
                Log.d("KanjiViewModel", "Split text into characters: $splitText")

                val kanjiList = splitText
                    .filter { char -> char.isNotEmpty() && char.matches("[\\p{InCJKUnifiedIdeographs}]".toRegex()) }
                Log.d("KanjiViewModel", "Filtered Kanji list: $kanjiList")

                _recognizedKanji.value = kanjiList
                _isRecognizing.value = false

                // Сохраняем распознанные иероглифы в коллекцию "Распознанные кандзи"
                if (kanjiList.isNotEmpty()) {
                    val kanjiString = kanjiList.joinToString(",")
                    val capturedCollection = collections.value.find { it.name == "Распознанные кандзи" }
                    if (capturedCollection != null) {
                        // Преобразуем список в MutableList один раз и используем его
                        val updatedKanjiList = capturedCollection.kanjiList.split(",").filter { it.isNotEmpty() }.toMutableList()
                        kanjiList.forEach { kanji ->
                            if (kanji !in updatedKanjiList) {
                                updatedKanjiList.add(kanji)
                            }
                        }
                        val updatedCollection = capturedCollection.copy(kanjiList = updatedKanjiList.joinToString(","))
                        repository.updateCollection(updatedCollection)
                    } else {
                        // Создаём новую коллекцию "Распознанные кандзи"
                        val newCollection = KanjiCollection(name = "Распознанные кандзи", kanjiList = kanjiString)
                        repository.insertCollection(newCollection)
                    }
                }
            } catch (e: Exception) {
                Log.e("KanjiViewModel", "Error recognizing Kanji: ${e.message}", e)
                _recognizedKanji.value = emptyList()
                _isRecognizing.value = false
            }
        }
    }

    private fun fetchCollections() {
        viewModelScope.launch {
            try {
                repository.getAllCollections().collect { collections: List<KanjiCollection> ->
                    _collections.value = collections
                    Log.d("KanjiViewModel", "Collections fetched: $collections")
                }
            } catch (e: Exception) {
                Log.e("KanjiViewModel", "Error fetching collections", e)
            }
        }
    }

    fun searchCollections(query: String) {
        viewModelScope.launch {
            if (query.isEmpty()) {
                fetchCollections()
            } else {
                repository.searchCollections(query).collect { collections: List<KanjiCollection> ->
                    _collections.value = collections
                }
            }
        }
    }

    fun addToCollection(collection: KanjiCollection, kanji: String) {
        viewModelScope.launch {
            val updatedKanjiList = collection.kanjiList.split(",").toMutableList()
            if (kanji !in updatedKanjiList) {
                updatedKanjiList.add(kanji)
                val updatedCollection = collection.copy(kanjiList = updatedKanjiList.joinToString(","))
                repository.updateCollection(updatedCollection)
            }
        }
    }

    fun removeFromCollection(collection: KanjiCollection, kanji: String) {
        viewModelScope.launch {
            val updatedKanjiList = collection.kanjiList.split(",").toMutableList()
            updatedKanjiList.remove(kanji)
            val updatedCollection = collection.copy(kanjiList = updatedKanjiList.joinToString(","))
            repository.updateCollection(updatedCollection)
        }
    }

    fun createCollection(name: String, kanji: String) {
        viewModelScope.launch {
            val newCollection = KanjiCollection(name = name, kanjiList = kanji)
            repository.insertCollection(newCollection)
        }
    }

    fun renameCollection(collection: KanjiCollection, newName: String) {
        viewModelScope.launch {
            val updatedCollection = collection.copy(name = newName)
            repository.updateCollection(updatedCollection)
        }
    }

    fun deleteCollection(collection: KanjiCollection) {
        viewModelScope.launch {
            repository.deleteCollection(collection)
        }
    }

    fun testInsertCollection() {
        viewModelScope.launch {
            val testCollection = KanjiCollection(name = "Test Collection", kanjiList = "日,月")
            repository.insertCollection(testCollection)
            Log.d("KanjiViewModel", "Test collection inserted")
        }
    }

    override fun onCleared() {
        tessBaseAPI?.end()
        super.onCleared()
    }
}
# File: ./app/src/main/python/ocr.py
import cv2
import numpy as np
import pytesseract
from PIL import Image
import io

def preprocess_image(image_bytes):
    img = cv2.imdecode(np.frombuffer(image_bytes, np.uint8), cv2.IMREAD_COLOR)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    contrast = clahe.apply(gray)
    binary = cv2.adaptiveThreshold(contrast, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
    return binary

def recognize_kanji(image_bytes):
    img = preprocess_image(image_bytes)
    _, img_encoded = cv2.imencode('.png', img)
    img_pil = Image.open(io.BytesIO(img_encoded.tobytes()))
    custom_config = r'--oem 3 --psm 7 -l jpn --dpi 600'
    text = pytesseract.image_to_string(img_pil, config=custom_config)
    kanji = "".join(char for char in text if '\u4e00' <= char <= '\u9fff')
    return list(kanji)
# File: ./app/src/main/python/requirements.txt
pytesseract
opencv-python-headless
Pillow
# File: ./app/src/main/res/drawable/ic_all_kanji.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M4,6H2v14c0,1.1 0.9,2 2,2h14v-2H4V6zm16,-4H8c-1.1,0-2,0.9-2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2-0.9 2-2V4c0-1.1-0.9-2-2-2zm-1,9H9V9h10v2zm-4,4H9v-2h6v2zm4-8H9V5h10v2z"/>
</vector>
# File: ./app/src/main/res/drawable/ic_collections.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M4,6H2v14c0,1.1 0.9,2 2,2h14v-2H4V6zm16,-4H8c-1.1,0-2,0.9-2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2-0.9 2-2V4c0-1.1-0.9-2-2-2zm-1,9h-4v4h-2v-4H9V9h4V5h2v4h4v2z"/>
</vector>
# File: ./app/src/main/res/drawable/ic_home.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24"
    android:viewportHeight="24">
    <path
        android:fillColor="#000000"
        android:pathData="M10,20v-6h4v6h5v-8h3L12,3 2,12h3v8z"/>
</vector>
# File: ./app/src/main/res/drawable/ic_launcher_background.xml
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

# File: ./app/src/main/res/drawable/ic_launcher_foreground.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
# File: ./app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
# File: ./app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
# File: ./app/src/main/res/raw/kanji_list.txt
一丁七万丈三上下不世丘丙丞乃久乗乙九乞乱乳乾亜交京享亭亮人仁今仏仙代令以仮仰仲件任企伏休伯伴伸伺似但位低住佐体何余作佳使例侍供依価侯侵便係促俊俗保信修俳俵倉個倍候借値倫償傷優元兄充兆先光克免児党兜入全八公六共兵其具典兼内円冊再冒冗写冠冥冬凍処出刀刃分切刈刊刑列初判別利到制刷券刺刻則削前剖剛剣剤剥副劇力功加劣助努労効励動勘務勝勢勤勧包化北区医匿十千升午半協南単博占印危即却卵厚原厳去参又及友反収取受口古句可史右叶号司各合同后向君否吸吹吾呼命和品員唱商問喜四回因団在困囲図固国圏園土圧坂均坊坑坪垂型埋城域執基堀堂堅堆堕報場塊塔塗塩境墓増墨墜複壁壊士壮声売変夏夕外多夜夢大天太夫失奥奨奮女奴好如妃妄姉妹妻始姓委姫姻姿子孤存孫学孟季宗定宜宙宝実客宣室宮害宴家容宿寄密富寒察寡寝審寸寺対射将尊導小少尖尚就尺尼尾尿局居届屋展層履属山岐岡岩崩岳岸峠峡峰島崇崎川州巡巣工左巧巨差己市布希帳帷常帽幅幕幌干平年幸幹幻幼幽幾床序底店府度座庫庭庶康庸廉廊延廷建弁弄弊式弐弓引弗弟弥弦弧弱張強弾当形彩彫影役彼往征
# File: ./app/src/main/res/values/colors.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>
# File: ./app/src/main/res/values/strings.xml
<resources>
    <string name="app_name">MyNewApplication</string>
</resources>
# File: ./app/src/main/res/values/themes.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.MyNewApplication" parent="android:Theme.Material.Light.NoActionBar" />
</resources>
# File: ./app/src/main/res/xml/backup_rules.xml
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>
# File: ./app/src/main/res/xml/data_extraction_rules.xml
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>
# File: ./app/src/test/java/com/example/mynewapplication/ExampleUnitTest.kt
package com.example.mynewapplication

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}
# File: ./build.gradle.kts
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
    id("com.chaquo.python") version "15.0.1" apply false // Chaquopy
}

# File: ./myAndroidProject.txt

# File: ./settings.gradle.kts
pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        maven { url = uri("https://chaquo.com/maven") } // Добавляем репозиторий Chaquopy
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven { url = uri("https://chaquo.com/maven") } // Добавляем репозиторий Chaquopy
    }
}
rootProject.name = "MyNewApplication"
include(":app")
