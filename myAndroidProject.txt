# File: ./app/build.gradle.kts
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    id("com.chaquo.python") version "15.0.1"
    id("com.google.devtools.ksp") version "2.0.21-1.0.27"
}

android {
    namespace = "com.example.mynewapplication"
    compileSdk = 36

    defaultConfig {
        applicationId = "com.example.mynewapplication"
        minSdk = 24
        targetSdk = 36
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters += listOf(
                "armeabi-v7a", "x86", "x86_64"
            )
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }
    buildFeatures {
        compose = true
    }
}

dependencies {
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.camera.core)
    implementation(libs.androidx.camera.camera2)
    implementation(libs.androidx.camera.lifecycle)
    implementation(libs.androidx.camera.view)
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.room.ktx)
    ksp(libs.androidx.room.compiler)
    implementation(libs.gson)
    implementation(libs.androidx.navigation.compose)
    implementation(libs.kotlinx.coroutines.android.v181)
    implementation(libs.coil.compose)
    implementation("com.rmtheis:tess-two:9.1.0") {
        exclude(group = "com.intellij", module = "annotations")
    }
    implementation(libs.androidx.lifecycle.runtime.compose)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}

chaquopy {
    defaultConfig {
        buildPython("C:/Users/yeliz/PycharmProjects/japan/.venv/Scripts/python.exe")
        pip {
            install("opencv-python-headless")
            install("Pillow")
        }
    }
}
# File: ./app/src/androidTest/java/com/example/mynewapplication/ExampleInstrumentedTest.kt
package com.example.mynewapplication

import androidx.test.platform.app.InstrumentationRegistry
import androidx.test.ext.junit.runners.AndroidJUnit4

import org.junit.Test
import org.junit.runner.RunWith

import org.junit.Assert.*

/**
 * Instrumented test, which will execute on an Android device.
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
@RunWith(AndroidJUnit4::class)
class ExampleInstrumentedTest {
    @Test
    fun useAppContext() {
        // Context of the app under test.
        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
        assertEquals("com.example.mynewapplication", appContext.packageName)
    }
}
# File: ./app/src/main/AndroidManifest.xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.mynewapplication">

    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32" />
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
    <uses-permission android:name="android.permission.CAMERA" />

    <uses-feature android:name="android.hardware.camera" android:required="false" />

    <application
        android:name=".App"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.MyNewApplication">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
# File: ./app/src/main/java/com/example/mynewapplication/App.kt
package com.example.mynewapplication

import android.app.Application
import android.util.Log
import com.chaquo.python.Python
import com.chaquo.python.android.AndroidPlatform

class App : Application() {
    override fun onCreate() {
        super.onCreate()
        // Инициализация Chaquopy
        if (!Python.isStarted()) {
            Python.start(AndroidPlatform(this))
            Log.d("App", "Python initialized successfully")
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/data/dao/KanjiCollectionDao.kt
package com.example.mynewapplication.data.dao

import androidx.room.Dao
import androidx.room.Delete
import androidx.room.Insert
import androidx.room.Query
import androidx.room.Update
import com.example.mynewapplication.data.model.KanjiCollection
import kotlinx.coroutines.flow.Flow

@Dao
interface KanjiCollectionDao {
    @Query("SELECT * FROM kanji_collections")
    fun getAllCollections(): Flow<List<KanjiCollection>>

    @Query("SELECT * FROM kanji_collections WHERE name LIKE '%' || :query || '%'")
    fun searchCollections(query: String): Flow<List<KanjiCollection>>

    @Insert
    suspend fun insertCollection(collection: KanjiCollection)

    @Update
    suspend fun updateCollection(collection: KanjiCollection)

    @Delete
    suspend fun deleteCollection(collection: KanjiCollection)
}
# File: ./app/src/main/java/com/example/mynewapplication/data/db/AppDatabase.kt
package com.example.mynewapplication.data.db

import androidx.room.Database
import androidx.room.RoomDatabase
import com.example.mynewapplication.data.dao.KanjiCollectionDao
import com.example.mynewapplication.data.model.KanjiCollection

@Database(entities = [KanjiCollection::class], version = 1, exportSchema = false)
abstract class AppDatabase : RoomDatabase() {
    abstract fun kanjiCollectionDao(): KanjiCollectionDao

    companion object {
        @Volatile
        private var INSTANCE: AppDatabase? = null

        fun getDatabase(context: android.content.Context): AppDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = androidx.room.Room.databaseBuilder(
                    context.applicationContext,
                    AppDatabase::class.java,
                    "kanji_database"
                ).build()
                INSTANCE = instance
                instance
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/data/json/JsonParser.kt
package com.example.mynewapplication.data.json

import android.content.Context
import com.example.mynewapplication.data.model.Kanji
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import java.io.BufferedReader

object JsonParser {
    fun loadKanjiList(context: Context): List<Kanji> {
        val jsonString = context.assets.open("kanji_database.json").bufferedReader().use(BufferedReader::readText)
        val type = object : TypeToken<List<Kanji>>() {}.type
        return Gson().fromJson(jsonString, type)
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/data/model/Kanji.kt
package com.example.mynewapplication.data.model

data class Kanji(
    val kanji: String,
    val translation: String,
    val onReadings: List<String>,
    val kunReadings: List<String>,
    val radical: String,
    val strokes: Int,
    val grade: Int,
    val gifPath: String? = null,
    val combinations: List<String> = emptyList()
)

# File: ./app/src/main/java/com/example/mynewapplication/data/model/KanjiCollection.kt
package com.example.mynewapplication.data.model

import androidx.room.Entity
import androidx.room.PrimaryKey

@Entity(tableName = "kanji_collections")
data class KanjiCollection(
    @PrimaryKey(autoGenerate = true) val id: Int = 0,
    val name: String,
    val kanjiList: String
)
# File: ./app/src/main/java/com/example/mynewapplication/data/repository/KanjiCollectionRepository.kt
package com.example.mynewapplication.data.repository

import com.example.mynewapplication.data.dao.KanjiCollectionDao
import com.example.mynewapplication.data.model.KanjiCollection
import kotlinx.coroutines.flow.Flow

class KanjiCollectionRepository(private val dao: KanjiCollectionDao) {
    fun getAllCollections(): Flow<List<KanjiCollection>> {
        return dao.getAllCollections()
    }

    fun searchCollections(query: String): Flow<List<KanjiCollection>> {
        return dao.searchCollections(query)
    }

    suspend fun insertCollection(collection: KanjiCollection) {
        dao.insertCollection(collection)
    }

    suspend fun updateCollection(collection: KanjiCollection) {
        dao.updateCollection(collection)
    }

    suspend fun deleteCollection(collection: KanjiCollection) {
        dao.deleteCollection(collection)
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/MainActivity.kt
package com.example.mynewapplication

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import com.example.mynewapplication.navigation.NavGraph
import com.example.mynewapplication.ui.theme.MyNewApplicationTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            MyNewApplicationTheme {
                Surface(color = MaterialTheme.colorScheme.background) {
                    NavGraph()
                }
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/navigation/NavGraph.kt
package com.example.mynewapplication.navigation

import androidx.compose.runtime.Composable
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import androidx.navigation.navArgument
import com.example.mynewapplication.ui.screens.CameraScreen
import com.example.mynewapplication.ui.screens.ImagePickerScreen
import com.example.mynewapplication.ui.screens.KanjiDetailsScreen
import com.example.mynewapplication.ui.screens.KanjiListScreen
import com.example.mynewapplication.ui.screens.CollectionsScreen
import com.example.mynewapplication.ui.screens.CollectionDetailsScreen
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@Composable
fun NavGraph() {
    val navController = rememberNavController()
    val viewModel: KanjiViewModel = viewModel()

    NavHost(navController = navController, startDestination = "kanji_list") {
        composable("kanji_list") {
            KanjiListScreen(navController = navController, viewModel = viewModel)
        }
        composable(
            route = "kanji_details/{kanji}",
            arguments = listOf(navArgument("kanji") { type = NavType.StringType })
        ) { backStackEntry ->
            val kanji = backStackEntry.arguments?.getString("kanji") ?: ""
            KanjiDetailsScreen(kanji = kanji, navController = navController, viewModel = viewModel)
        }
        composable("camera") {
            CameraScreen(navController = navController, viewModel = viewModel)
        }
        composable("image_picker") {
            ImagePickerScreen(navController = navController, viewModel = viewModel)
        }
        composable("collections") {
            CollectionsScreen(navController = navController, viewModel = viewModel)
        }
        composable(
            route = "collection_details/{collectionId}",
            arguments = listOf(navArgument("collectionId") { type = NavType.IntType })
        ) { backStackEntry ->
            val collectionId = backStackEntry.arguments?.getInt("collectionId") ?: 0
            CollectionDetailsScreen(
                collectionId = collectionId,
                navController = navController,
                viewModel = viewModel
            )
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/CameraScreen.kt
package com.example.mynewapplication.ui.screens


import android.Manifest
import android.content.pm.PackageManager
import android.graphics.Bitmap
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageCapture
import androidx.camera.core.ImageCaptureException
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.compose.foundation.layout.*
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import androidx.core.content.ContextCompat
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.compose.LocalLifecycleOwner
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

@Composable
fun CameraScreen(navController: NavController, viewModel: KanjiViewModel) {
    val context = LocalContext.current
    var hasCameraPermission by remember { mutableStateOf(false) }
    val lifecycleOwner = LocalLifecycleOwner.current
    val cameraExecutor: ExecutorService = Executors.newSingleThreadExecutor()

    // Запрос разрешения на камеру
    val permissionLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        hasCameraPermission = isGranted
    }

    LaunchedEffect(Unit) {
        hasCameraPermission = ContextCompat.checkSelfPermission(
            context,
            Manifest.permission.CAMERA
        ) == PackageManager.PERMISSION_GRANTED
        if (!hasCameraPermission) {
            permissionLauncher.launch(Manifest.permission.CAMERA)
        }
    }

    if (hasCameraPermission) {
        CameraPreview(
            lifecycleOwner = lifecycleOwner,
            cameraExecutor = cameraExecutor,
            onImageCaptured = { bitmap ->
                viewModel.recognizeKanji(bitmap)
                navController.navigate("kanji_list")
            }
        )
    } else {
        Text(
            text = "Camera permission is required to take photos.",
            modifier = Modifier.padding(16.dp)
        )
    }

    // Очистка при выходе
    DisposableEffect(Unit) {
        onDispose {
            cameraExecutor.shutdown()
        }
    }
}

@Composable
fun CameraPreview(
    lifecycleOwner: LifecycleOwner,
    cameraExecutor: ExecutorService,
    onImageCaptured: (Bitmap) -> Unit
) {
    val context = LocalContext.current
    val cameraProviderFuture = remember { ProcessCameraProvider.getInstance(context) }
    val imageCapture = remember { ImageCapture.Builder().build() }

    Column(
        modifier = Modifier.fillMaxSize(),
        verticalArrangement = Arrangement.Center,
        horizontalAlignment = androidx.compose.ui.Alignment.CenterHorizontally
    ) {
        AndroidView(
            factory = { ctx ->
                val previewView = PreviewView(ctx)
                val cameraProvider = cameraProviderFuture.get()

                val preview = Preview.Builder().build().also {
                    it.setSurfaceProvider(previewView.surfaceProvider)
                }

                val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

                try {
                    cameraProvider.unbindAll()
                    cameraProvider.bindToLifecycle(
                        lifecycleOwner,
                        cameraSelector,
                        preview,
                        imageCapture
                    )
                } catch (e: Exception) {
                    e.printStackTrace()
                }

                previewView
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(400.dp)
        )

        Spacer(modifier = Modifier.height(16.dp))

        Button(
            onClick = {
                val outputOptions = ImageCapture.OutputFileOptions.Builder(
                    context.contentResolver,
                    android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI,
                    android.content.ContentValues()
                ).build()

                imageCapture.takePicture(
                    outputOptions,
                    cameraExecutor,
                    object : ImageCapture.OnImageSavedCallback {
                        override fun onImageSaved(output: ImageCapture.OutputFileResults) {
                            output.savedUri?.let { uri ->
                                val inputStream = context.contentResolver.openInputStream(uri)
                                val bitmap = android.graphics.BitmapFactory.decodeStream(inputStream)
                                inputStream?.close()
                                onImageCaptured(bitmap)
                            }
                        }

                        override fun onError(exception: ImageCaptureException) {
                            exception.printStackTrace()
                        }
                    }
                )
            }
        ) {
            Text("Capture Image")
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/CollectionDetailsScreen.kt
package com.example.mynewapplication.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@Composable
fun CollectionDetailsScreen(collectionId: Int, navController: NavController, viewModel: KanjiViewModel) {
    val collections by viewModel.collections.collectAsState()
    val collection = collections.find { coll -> coll.id == collectionId }
    var showRenameDialog by remember { mutableStateOf(false) }
    var newCollectionName by remember { mutableStateOf("") }
    var searchKanjiQuery by remember { mutableStateOf("") }

    if (collection != null) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                text = collection.name,
                style = MaterialTheme.typography.headlineLarge,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Button(
                    onClick = { showRenameDialog = true },
                    modifier = Modifier.weight(1f).padding(end = 4.dp)
                ) {
                    Text("Rename")
                }
                Button(
                    onClick = {
                        viewModel.deleteCollection(collection)
                        navController.popBackStack()
                    },
                    modifier = Modifier.weight(1f).padding(start = 4.dp)
                ) {
                    Text("Delete")
                }
            }
            TextField(
                value = searchKanjiQuery,
                onValueChange = { searchKanjiQuery = it },
                label = { Text("Search Kanji in Collection") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 8.dp)
            )
            Text(
                text = "Kanji in Collection:",
                style = MaterialTheme.typography.titleMedium,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            val filteredKanji = collection.kanjiList.split(",").filter { kanji ->
                kanji.contains(searchKanjiQuery, ignoreCase = true)
            }
            LazyColumn {
                items(filteredKanji) { kanji: String ->
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp),
                        horizontalArrangement = Arrangement.SpaceBetween
                    ) {
                        Text(
                            text = kanji,
                            modifier = Modifier
                                .weight(1f)
                                .clickable {
                                    navController.navigate("kanji_details/$kanji")
                                }
                                .padding(8.dp)
                        )
                        Button(
                            onClick = {
                                viewModel.removeFromCollection(collection, kanji)
                            }
                        ) {
                            Text("Remove")
                        }
                    }
                }
            }
        }

        // Диалог для переименования коллекции
        if (showRenameDialog) {
            AlertDialog(
                onDismissRequest = { showRenameDialog = false },
                title = { Text("Rename Collection") },
                text = {
                    TextField(
                        value = newCollectionName,
                        onValueChange = { newCollectionName = it },
                        label = { Text("New Collection Name") },
                        modifier = Modifier.fillMaxWidth()
                    )
                },
                confirmButton = {
                    Button(
                        onClick = {
                            if (newCollectionName.isNotBlank()) {
                                viewModel.renameCollection(collection, newCollectionName)
                                showRenameDialog = false
                                newCollectionName = ""
                            }
                        }
                    ) {
                        Text("Rename")
                    }
                },
                dismissButton = {
                    Button(onClick = { showRenameDialog = false }) {
                        Text("Cancel")
                    }
                }
            )
        }
    } else {
        Text(
            text = "Collection not found",
            modifier = Modifier.padding(16.dp)
        )
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/CollectionsScreen.kt
package com.example.mynewapplication.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@Composable
fun CollectionsScreen(navController: NavController, viewModel: KanjiViewModel) {
    var searchQuery by remember { mutableStateOf("") }
    var sortBy by remember { mutableStateOf("name") } // name, count, date
    val collections by viewModel.collections.collectAsState()

    // Сортировка коллекций
    val sortedCollections = when (sortBy) {
        "count" -> collections.sortedByDescending { it.kanjiList.split(",").size }
        "date" -> collections.sortedByDescending { it.id }
        else -> collections.sortedBy { it.name }
    }

    Column(modifier = Modifier.padding(16.dp)) {
        Text(
            text = "Collections",
            style = MaterialTheme.typography.headlineLarge,
            color = MaterialTheme.colorScheme.primary,
            modifier = Modifier.padding(bottom = 8.dp)
        )
        TextField(
            value = searchQuery,
            onValueChange = {
                searchQuery = it
                viewModel.searchCollections(it)
            },
            label = { Text("Search Collections") },
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp)
        )
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text(
                text = "Sort by:",
                style = MaterialTheme.typography.bodyMedium,
                modifier = Modifier.padding(end = 8.dp)
            )
            listOf("name", "count", "date").forEach { sortOption ->
                Button(
                    onClick = { sortBy = sortOption },
                    modifier = Modifier.padding(end = 4.dp)
                ) {
                    Text(sortOption.replaceFirstChar { it.uppercase() })
                }
            }
        }
        if (sortedCollections.isEmpty()) {
            Text(
                text = "No collections yet. Add kanji to a collection from the details screen!",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.Gray,
                modifier = Modifier.padding(16.dp)
            )
        } else {
            LazyColumn {
                items(sortedCollections) { collection ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp)
                            .clickable {
                                navController.navigate("collection_details/${collection.id}")
                            },
                        colors = CardDefaults.cardColors(
                            containerColor = MaterialTheme.colorScheme.surfaceVariant
                        ),
                        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Column {
                                Text(
                                    text = collection.name,
                                    style = MaterialTheme.typography.titleMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                Text(
                                    text = "Kanji: ${collection.kanjiList}",
                                    style = MaterialTheme.typography.bodyMedium,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/ImagePickerScreen.kt
package com.example.mynewapplication.ui.screens

import android.Manifest
import android.content.pm.PackageManager
import android.graphics.BitmapFactory
import android.os.Build
import android.provider.MediaStore
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.PickVisualMediaRequest
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Button
import androidx.compose.material3.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@Composable
fun ImagePickerScreen(navController: NavController, viewModel: KanjiViewModel) {
    val context = LocalContext.current
    var hasStoragePermission by remember { mutableStateOf(false) }
    var shouldShowPermissionRationale by remember { mutableStateOf(false) }

    // Разрешение для доступа к изображениям
    val storagePermission = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
        Manifest.permission.READ_MEDIA_IMAGES
    } else {
        Manifest.permission.READ_EXTERNAL_STORAGE
    }

    // Запрос разрешения
    val permissionLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        hasStoragePermission = isGranted
        if (!isGranted) {
            shouldShowPermissionRationale = ContextCompat.checkSelfPermission(
                context,
                storagePermission
            ) == PackageManager.PERMISSION_DENIED
        }
    }

    // Запуск выбора изображения через PickVisualMedia
    val pickMediaLauncher = rememberLauncherForActivityResult(ActivityResultContracts.PickVisualMedia()) { uri ->
        uri?.let {
            val bitmap = BitmapFactory.decodeStream(context.contentResolver.openInputStream(it))
            viewModel.recognizeKanji(bitmap)
        }
    }

    // Проверка разрешения при запуске экрана
    LaunchedEffect(Unit) {
        hasStoragePermission = ContextCompat.checkSelfPermission(
            context,
            storagePermission
        ) == PackageManager.PERMISSION_GRANTED
        if (!hasStoragePermission) {
            permissionLauncher.launch(storagePermission)
        }
    }

    Column(modifier = Modifier.padding(16.dp)) {
        if (hasStoragePermission) {
            // Проверяем поддержку Selected Photos Access на Android 14+
            val maxImages = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
                MediaStore.getPickImagesMaxLimit()
            } else {
                1 // На старых версиях Android выбираем только одно изображение
            }

            Button(
                onClick = {
                    val request = PickVisualMediaRequest.Builder()
                        .setMediaType(ActivityResultContracts.PickVisualMedia.ImageOnly)
                        .build()
                    pickMediaLauncher.launch(request)
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Выбрать изображение из галереи (максимум: $maxImages)")
            }
            Spacer(modifier = Modifier.height(16.dp))
            // Отображение распознанных кандзи
            val recognizedKanji by viewModel.recognizedKanji.collectAsState()
            LazyColumn {
                items(recognizedKanji) { kanji ->
                    Text(
                        text = kanji,
                        modifier = Modifier
                            .fillMaxWidth()
                            .clickable {
                                navController.navigate("kanji_details/$kanji")
                            }
                            .padding(8.dp)
                    )
                }
            }
        } else {
            Text(
                text = if (shouldShowPermissionRationale) {
                    "Разрешение на доступ к изображениям необходимо для выбора фото. Пожалуйста, предоставьте разрешение в настройках."
                } else {
                    "Требуется разрешение на доступ к изображениям."
                },
                modifier = Modifier.padding(16.dp)
            )
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/KanjiDetailsScreen.kt
package com.example.mynewapplication.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.mynewapplication.data.model.Kanji
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@Composable
fun KanjiDetailsScreen(
    kanji: String,
    viewModel: KanjiViewModel,
    navController: NavController
) {
    // Здесь мы должны получить данные о конкретном иероглифе
    // Для примера, предположим, что у нас есть список иероглифов
    // В реальном приложении это может быть запрос к API или базе данных
    val dummyKanji = Kanji(
        kanji = kanji,
        translation = "Пример перевода",
        onReadings = listOf("オン"),
        kunReadings = listOf("くん"),
        radical = "⺈",
        strokes = 3,
        grade = 1,
        gifPath = null,
        combinations = listOf("組合", "結合")
    )

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = dummyKanji.kanji,
            style = MaterialTheme.typography.headlineLarge
        )
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = "Перевод: ${dummyKanji.translation}",
            style = MaterialTheme.typography.bodyLarge
        )
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = "Чтения он: ${dummyKanji.onReadings.joinToString(", ")}",
            style = MaterialTheme.typography.bodyLarge
        )
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = "Чтения кун: ${dummyKanji.kunReadings.joinToString(", ")}",
            style = MaterialTheme.typography.bodyLarge
        )
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = "Радикал: ${dummyKanji.radical}",
            style = MaterialTheme.typography.bodyLarge
        )
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = "Штрихи: ${dummyKanji.strokes}",
            style = MaterialTheme.typography.bodyLarge
        )
        Spacer(modifier = Modifier.height(8.dp))
        Text(
            text = "Уровень: ${dummyKanji.grade}",
            style = MaterialTheme.typography.bodyLarge
        )
        Spacer(modifier = Modifier.height(16.dp))
        dummyKanji.combinations.forEach { combination ->
            Button(
                onClick = {
                    navController.navigate("kanji_details/$combination")
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(text = combination)
            }
            Spacer(modifier = Modifier.height(8.dp))
        }
        Spacer(modifier = Modifier.height(16.dp))
        val collections = viewModel.collections.collectAsState().value
        collections.forEach { collection ->
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(text = collection.name)
                Button(
                    onClick = {
                        viewModel.addToCollection(collection, dummyKanji.kanji)
                    }
                ) {
                    Text("Добавить в коллекцию")
                }
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/screens/KanjiListScreen.kt
package com.example.mynewapplication.ui.screens

import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.example.mynewapplication.ui.viewmodel.KanjiViewModel

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun KanjiListScreen(viewModel: KanjiViewModel, navController: NavController) {
    val collections by viewModel.collections.collectAsState()
    var selectedCollection by remember { mutableStateOf(collections.firstOrNull()) }
    var expanded by remember { mutableStateOf(false) } // Добавляем состояние для раскрытия меню

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        // Dropdown для выбора коллекции
        ExposedDropdownMenuBox(
            expanded = expanded,
            onExpandedChange = { expanded = !expanded },
            modifier = Modifier.fillMaxWidth()
        ) {
            TextField(
                value = selectedCollection?.name ?: "Выберите коллекцию",
                onValueChange = {},
                readOnly = true,
                modifier = Modifier
                    .fillMaxWidth()
                    .menuAnchor(
                        type = MenuAnchorType.PrimaryNotEditable,
                        enabled = true
                    )
            )
            ExposedDropdownMenu(
                expanded = expanded,
                onDismissRequest = { expanded = false }
            ) {
                collections.forEach { collection ->
                    DropdownMenuItem(
                        text = { Text(collection.name) },
                        onClick = {
                            selectedCollection = collection
                            expanded = false
                        }
                    )
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        selectedCollection?.let { collection ->
            val kanjiList = collection.kanjiList.split(",").filter { it.isNotEmpty() }
            LazyColumn {
                items(kanjiList) { kanji ->
                    Card(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(vertical = 4.dp)
                            .clickable {
                                navController.navigate("kanji_details/$kanji")
                            }
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            horizontalArrangement = Arrangement.SpaceBetween
                        ) {
                            Text(text = kanji)
                            Button(
                                onClick = {
                                    viewModel.removeFromCollection(collection, kanji)
                                }
                            ) {
                                Text("Удалить")
                            }
                        }
                    }
                }
            }
        }
    }
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/theme/Color.kt
package com.example.mynewapplication.ui.theme

import androidx.compose.ui.graphics.Color

val Purple80 = Color(0xFFD0BCFF)
val PurpleGrey80 = Color(0xFFCCC2DC)
val Pink80 = Color(0xFFEFB8C8)

val Purple40 = Color(0xFF6650a4)
val PurpleGrey40 = Color(0xFF625b71)
val Pink40 = Color(0xFF7D5260)
# File: ./app/src/main/java/com/example/mynewapplication/ui/theme/Theme.kt
package com.example.mynewapplication.ui.theme

import android.app.Activity
import android.os.Build
import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.dynamicDarkColorScheme
import androidx.compose.material3.dynamicLightColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.runtime.Composable
import androidx.compose.ui.platform.LocalContext

private val DarkColorScheme = darkColorScheme(
    primary = Purple80,
    secondary = PurpleGrey80,
    tertiary = Pink80
)

private val LightColorScheme = lightColorScheme(
    primary = Purple40,
    secondary = PurpleGrey40,
    tertiary = Pink40

    /* Other default colors to override
    background = Color(0xFFFFFBFE),
    surface = Color(0xFFFFFBFE),
    onPrimary = Color.White,
    onSecondary = Color.White,
    onTertiary = Color.White,
    onBackground = Color(0xFF1C1B1F),
    onSurface = Color(0xFF1C1B1F),
    */
)

@Composable
fun MyNewApplicationTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    // Dynamic color is available on Android 12+
    dynamicColor: Boolean = true,
    content: @Composable () -> Unit
) {
    val colorScheme = when {
        dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
            val context = LocalContext.current
            if (darkTheme) dynamicDarkColorScheme(context) else dynamicLightColorScheme(context)
        }

        darkTheme -> DarkColorScheme
        else -> LightColorScheme
    }

    MaterialTheme(
        colorScheme = colorScheme,
        typography = Typography,
        content = content
    )
}
# File: ./app/src/main/java/com/example/mynewapplication/ui/theme/Type.kt
package com.example.mynewapplication.ui.theme

import androidx.compose.material3.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

// Set of Material typography styles to start with
val Typography = Typography(
    bodyLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp,
        lineHeight = 24.sp,
        letterSpacing = 0.5.sp
    )
    /* Other default text styles to override
    titleLarge = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 22.sp,
        lineHeight = 28.sp,
        letterSpacing = 0.sp
    ),
    labelSmall = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Medium,
        fontSize = 11.sp,
        lineHeight = 16.sp,
        letterSpacing = 0.5.sp
    )
    */
)
# File: ./app/src/main/java/com/example/mynewapplication/ui/viewmodel/KanjiViewModel.kt
package com.example.mynewapplication.ui.viewmodel

import android.app.Application
import android.content.Context
import android.graphics.Bitmap
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.example.mynewapplication.data.db.AppDatabase
import com.example.mynewapplication.data.model.KanjiCollection
import com.example.mynewapplication.data.repository.KanjiCollectionRepository
import com.googlecode.tesseract.android.TessBaseAPI
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.io.File
import java.io.FileOutputStream
import java.io.IOException

class KanjiViewModel(application: Application) : AndroidViewModel(application) {

    private val repository: KanjiCollectionRepository
    private val _collections = MutableStateFlow<List<KanjiCollection>>(emptyList())
    val collections = _collections.asStateFlow()

    private val _recognizedKanji = MutableStateFlow<List<String>>(emptyList())
    val recognizedKanji = _recognizedKanji.asStateFlow()

    private var tessBaseAPI: TessBaseAPI? = null

    init {
        //val db = AppDatabase.getDatabase(application)
        //repository = KanjiCollectionRepository(db.kanjiCollectionDao())
        initializeTesseract(application)
        //fetchCollections()
    }

    private fun initializeTesseract(context: Context) {
        try {
            tessBaseAPI = TessBaseAPI()
            val dataPath = File(context.filesDir, "tesseract").absolutePath
            val tessDataPath = File(dataPath, "tessdata").absolutePath

            // Копируем tessdata из assets в filesDir
            val tessDataDir = File(tessDataPath)
            if (!tessDataDir.exists()) {
                tessDataDir.mkdirs()
                val assetManager = context.assets
                val inputStream = assetManager.open("tessdata/jpn_finetuned.traineddata")
                val outputStream = FileOutputStream(File(tessDataPath, "jpn_finetuned.traineddata"))
                inputStream.copyTo(outputStream)
                inputStream.close()
                outputStream.close()
            }

            // Инициализируем Tesseract с jpn_finetuned
            val initialized = tessBaseAPI!!.init(dataPath, "jpn_finetuned")
            if (!initialized) {
                Log.e("KanjiViewModel", "Could not initialize Tesseract")
                tessBaseAPI = null
            } else {
                Log.d("KanjiViewModel", "Tesseract initialized successfully")
            }
        } catch (e: IOException) {
            Log.e("KanjiViewModel", "Error initializing Tesseract", e)
            tessBaseAPI = null
        }
    }

    fun recognizeKanji(bitmap: Bitmap) {
        viewModelScope.launch(Dispatchers.IO) {
            try {
                if (tessBaseAPI == null) {
                    Log.e("KanjiViewModel", "Tesseract is not initialized")
                    _recognizedKanji.value = emptyList()
                    return@launch
                }

                // Устанавливаем изображение для распознавания
                tessBaseAPI!!.setImage(bitmap)
                val recognizedText = tessBaseAPI!!.utF8Text

                // Разделяем текст на отдельные иероглифы
                val kanjiList = recognizedText
                    .replace("\n", "")
                    .replace(" ", "")
                    .split("")
                    .filter { char -> char.isNotEmpty() && char.matches("[\\p{InCJKUnifiedIdeographs}]".toRegex()) }

                Log.d("KanjiViewModel", "Recognized Kanji: $kanjiList")
                _recognizedKanji.value = kanjiList
            } catch (e: Exception) {
                Log.e("KanjiViewModel", "Error recognizing Kanji", e)
                _recognizedKanji.value = emptyList()
            }
        }
    }

    private fun fetchCollections() {
        viewModelScope.launch {
            repository.getAllCollections().collect { collections: List<KanjiCollection> ->
                _collections.value = collections
            }
        }
    }

    fun searchCollections(query: String) {
        viewModelScope.launch {
            if (query.isEmpty()) {
                fetchCollections()
            } else {
                repository.searchCollections(query).collect { collections: List<KanjiCollection> ->
                    _collections.value = collections
                }
            }
        }
    }

    fun addToCollection(collection: KanjiCollection, kanji: String) {
        viewModelScope.launch {
            val updatedKanjiList = collection.kanjiList.split(",").toMutableList()
            if (kanji !in updatedKanjiList) {
                updatedKanjiList.add(kanji)
                val updatedCollection = collection.copy(kanjiList = updatedKanjiList.joinToString(","))
                repository.updateCollection(updatedCollection)
            }
        }
    }

    fun removeFromCollection(collection: KanjiCollection, kanji: String) {
        viewModelScope.launch {
            val updatedKanjiList = collection.kanjiList.split(",").toMutableList()
            updatedKanjiList.remove(kanji)
            val updatedCollection = collection.copy(kanjiList = updatedKanjiList.joinToString(","))
            repository.updateCollection(updatedCollection)
        }
    }

    fun createCollection(name: String, kanji: String) {
        viewModelScope.launch {
            val newCollection = KanjiCollection(name = name, kanjiList = kanji)
            repository.insertCollection(newCollection)
        }
    }

    fun renameCollection(collection: KanjiCollection, newName: String) {
        viewModelScope.launch {
            val updatedCollection = collection.copy(name = newName)
            repository.updateCollection(updatedCollection)
        }
    }

    fun deleteCollection(collection: KanjiCollection) {
        viewModelScope.launch {
            repository.deleteCollection(collection)
        }
    }

    override fun onCleared() {
        tessBaseAPI?.end()
        super.onCleared()
    }
}
# File: ./app/src/main/python/ocr.py
import cv2
import numpy as np
import pytesseract
from PIL import Image
import io

def preprocess_image(image_bytes):
    img = cv2.imdecode(np.frombuffer(image_bytes, np.uint8), cv2.IMREAD_COLOR)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    contrast = clahe.apply(gray)
    binary = cv2.adaptiveThreshold(contrast, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY_INV, 11, 2)
    return binary

def recognize_kanji(image_bytes):
    img = preprocess_image(image_bytes)
    _, img_encoded = cv2.imencode('.png', img)
    img_pil = Image.open(io.BytesIO(img_encoded.tobytes()))
    custom_config = r'--oem 3 --psm 7 -l jpn_finetuned --dpi 600' # Используем стандартный jpn
    text = pytesseract.image_to_string(img_pil, config=custom_config)
    kanji = "".join(char for char in text if '\u4e00' <= char <= '\u9fff')
    return list(kanji)
# File: ./app/src/main/python/requirements.txt
pytesseract
opencv-python-headless
Pillow
# File: ./app/src/main/res/drawable/ic_launcher_background.xml
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path
        android:fillColor="#3DDC84"
        android:pathData="M0,0h108v108h-108z" />
    <path
        android:fillColor="#00000000"
        android:pathData="M9,0L9,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,0L19,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,0L29,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,0L39,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,0L49,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,0L59,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,0L69,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,0L79,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M89,0L89,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M99,0L99,108"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,9L108,9"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,19L108,19"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,29L108,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,39L108,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,49L108,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,59L108,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,69L108,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,79L108,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,89L108,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M0,99L108,99"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,29L89,29"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,39L89,39"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,49L89,49"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,59L89,59"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,69L89,69"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M19,79L89,79"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M29,19L29,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M39,19L39,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M49,19L49,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M59,19L59,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M69,19L69,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
    <path
        android:fillColor="#00000000"
        android:pathData="M79,19L79,89"
        android:strokeWidth="0.8"
        android:strokeColor="#33FFFFFF" />
</vector>

# File: ./app/src/main/res/drawable/ic_launcher_foreground.xml
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
        <aapt:attr name="android:fillColor">
            <gradient
                android:endX="85.84757"
                android:endY="92.4963"
                android:startX="42.9492"
                android:startY="49.59793"
                android:type="linear">
                <item
                    android:color="#44000000"
                    android:offset="0.0" />
                <item
                    android:color="#00000000"
                    android:offset="1.0" />
            </gradient>
        </aapt:attr>
    </path>
    <path
        android:fillColor="#FFFFFF"
        android:fillType="nonZero"
        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
        android:strokeWidth="1"
        android:strokeColor="#00000000" />
</vector>
# File: ./app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
# File: ./app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
    <background android:drawable="@drawable/ic_launcher_background" />
    <foreground android:drawable="@drawable/ic_launcher_foreground" />
    <monochrome android:drawable="@drawable/ic_launcher_foreground" />
</adaptive-icon>
# File: ./app/src/main/res/values/colors.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="purple_200">#FFBB86FC</color>
    <color name="purple_500">#FF6200EE</color>
    <color name="purple_700">#FF3700B3</color>
    <color name="teal_200">#FF03DAC5</color>
    <color name="teal_700">#FF018786</color>
    <color name="black">#FF000000</color>
    <color name="white">#FFFFFFFF</color>
</resources>
# File: ./app/src/main/res/values/strings.xml
<resources>
    <string name="app_name">MyNewApplication</string>
</resources>
# File: ./app/src/main/res/values/themes.xml
<?xml version="1.0" encoding="utf-8"?>
<resources>

    <style name="Theme.MyNewApplication" parent="android:Theme.Material.Light.NoActionBar" />
</resources>
# File: ./app/src/main/res/xml/backup_rules.xml
<?xml version="1.0" encoding="utf-8"?><!--
   Sample backup rules file; uncomment and customize as necessary.
   See https://developer.android.com/guide/topics/data/autobackup
   for details.
   Note: This file is ignored for devices older than API 31
   See https://developer.android.com/about/versions/12/backup-restore
-->
<full-backup-content>
    <!--
   <include domain="sharedpref" path="."/>
   <exclude domain="sharedpref" path="device.xml"/>
-->
</full-backup-content>
# File: ./app/src/main/res/xml/data_extraction_rules.xml
<?xml version="1.0" encoding="utf-8"?><!--
   Sample data extraction rules file; uncomment and customize as necessary.
   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
   for details.
-->
<data-extraction-rules>
    <cloud-backup>
        <!-- TODO: Use <include> and <exclude> to control what is backed up.
        <include .../>
        <exclude .../>
        -->
    </cloud-backup>
    <!--
    <device-transfer>
        <include .../>
        <exclude .../>
    </device-transfer>
    -->
</data-extraction-rules>
# File: ./app/src/test/java/com/example/mynewapplication/ExampleUnitTest.kt
package com.example.mynewapplication

import org.junit.Test

import org.junit.Assert.*

/**
 * Example local unit test, which will execute on the development machine (host).
 *
 * See [testing documentation](http://d.android.com/tools/testing).
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }
}
# File: ./build.gradle.kts
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
    id("com.chaquo.python") version "15.0.1" apply false // Chaquopy
}

# File: ./myAndroidProject.txt

# File: ./settings.gradle.kts
pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        maven { url = uri("https://chaquo.com/maven") } // Добавляем репозиторий Chaquopy
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        maven { url = uri("https://chaquo.com/maven") } // Добавляем репозиторий Chaquopy
    }
}
rootProject.name = "MyNewApplication"
include(":app")
